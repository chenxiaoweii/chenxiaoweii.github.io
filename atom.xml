<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一期一会</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.dujiong.net/"/>
  <updated>2016-08-07T07:41:24.898Z</updated>
  <id>http://blog.dujiong.net/</id>
  
  <author>
    <name>dujiong</name>
    <email>dujiong.uestc@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tcp-2</title>
    <link href="http://blog.dujiong.net/2016/06/25/tcp-2/"/>
    <id>http://blog.dujiong.net/2016/06/25/tcp-2/</id>
    <published>2016-06-25T12:06:14.000Z</published>
    <updated>2016-08-07T07:41:24.898Z</updated>
    
    <content type="html">&lt;h3 id=&quot;TCP重传机制&quot;&gt;&lt;a href=&quot;#TCP重传机制&quot; class=&quot;headerlink&quot; title=&quot;TCP重传机制&quot;&gt;&lt;/a&gt;TCP重传机制&lt;/h3&gt;&lt;p&gt;TCP是可靠的、面向连接的协议，要保证所有的数据包都可以到达，所以，重传机制是必须的。&lt;br&gt;由于接收端给发送端的ACK只会确认最后一个连续的包，比如，发送端发了1、2、3、4、5一共5份数据，接收端收到了1、2，于是回ACK 3，然后收到了4，此时3没收到，怎么办？&lt;/p&gt;
&lt;h4 id=&quot;超时重传机制&quot;&gt;&lt;a href=&quot;#超时重传机制&quot; class=&quot;headerlink&quot; title=&quot;超时重传机制&quot;&gt;&lt;/a&gt;超时重传机制&lt;/h4&gt;&lt;p&gt;一种方法是不回ACK，一直等3，当发送方发现收不到3的ACK，超时后会重传3.一旦接收方收到3后吗，会A回CK 4，表示3和4都收到了。&lt;br&gt;但是，问题来了，因为一直等3，可能会导致4和5即便已经收到了，发送方因为没有收到ACK，悲观地认为4和5也丢了，所以可能导致4和5的重传。对此有两种选择：一种是仅重传timeout的包。也就是第3份数据，另一种是重传timeout后所有的数据，也就是第3，4，5这三份数据。这两种方式有好也有不好。第一种会节省带宽，但是慢，第二种会快一点，但是会浪费带宽，很可能会有无用功。但总体来说都不好。因为都在等timeout，timeout可能会很长。&lt;/p&gt;
&lt;h4 id=&quot;快速重传机制&quot;&gt;&lt;a href=&quot;#快速重传机制&quot; class=&quot;headerlink&quot; title=&quot;快速重传机制&quot;&gt;&lt;/a&gt;快速重传机制&lt;/h4&gt;&lt;p&gt;快速重传机制不以时间驱动，而以数据驱动重传&lt;/p&gt;
&lt;h3 id=&quot;Nagle算法&quot;&gt;&lt;a href=&quot;#Nagle算法&quot; class=&quot;headerlink&quot; title=&quot;Nagle算法&quot;&gt;&lt;/a&gt;Nagle算法&lt;/h3&gt;&lt;p&gt;Nagle算法要求一个TCP连接上最多只能有一个未被确认的未完成的小分组，在该分组的确认到达之前不能发送其他的小分组。TCP将手机这些少量的分组，并在确认到来时以一个分组的方式发出去。&lt;br&gt;该算法主要用于避免过多小分组在网络中传输，降低网络容量利用率。比如：一个20字节的TCP首部+20字节的IP首部+1个字节的数据组成的TCP数据报，有效传输利用率只有近1/40，这些小分组在广域网上会增加拥塞出现的可能。&lt;br&gt;但是，有时我们又需要关闭Nagle算法，比如说一些需要快速响应、对时延敏感的应用，如窗口程序，可以通过套接字选项TCP_NODELAY来关闭该算法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TCP重传机制&quot;&gt;&lt;a href=&quot;#TCP重传机制&quot; class=&quot;headerlink&quot; title=&quot;TCP重传机制&quot;&gt;&lt;/a&gt;TCP重传机制&lt;/h3&gt;&lt;p&gt;TCP是可靠的、面向连接的协议，要保证所有的数据包都可以到达，所以，重传机制是必须的。&lt;br&gt;由于接
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TCP协议总结（一）</title>
    <link href="http://blog.dujiong.net/2016/06/13/tcp-1/"/>
    <id>http://blog.dujiong.net/2016/06/13/tcp-1/</id>
    <published>2016-06-13T05:07:19.000Z</published>
    <updated>2016-08-07T07:53:51.202Z</updated>
    
    <content type="html">&lt;p&gt;最近，在学习和科研中，越来越发现自己对于TCP协议的掌握不够，作为一个成天和网络打交道的人，TCP/IP简直是我们最核心的知识之一，所以，准备利用接下来准备考试的间隙时间，结合《TCP/IP详解 卷一：协议》再重新学习和巩固一下TCP。          &lt;/p&gt;
&lt;h3 id=&quot;TCP首部&quot;&gt;&lt;a href=&quot;#TCP首部&quot; class=&quot;headerlink&quot; title=&quot;TCP首部&quot;&gt;&lt;/a&gt;TCP首部&lt;/h3&gt;&lt;p&gt;首先，来看一下TCP首部的数据格式，如果不计算Option字段，它通常是20个字节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/p9FVemz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要重点关注和理解的是:&lt;br&gt;（1） 每个TCP连接包含源端和目的端的端口号，用于标识发端和收端的应用进程。这两个值和下层IP层的源、目的IP地址构成了唯一标识一个TCP连接的四元组。&lt;br&gt;（2）序列号(Sequence Number)是包的序号，用来标识从TCP发端向收端发送的数据字节流，用来解决网络报乱序的问题。&lt;br&gt;（3）ACK，表示收到TCP包的确认。&lt;br&gt;（4）TCP Flags标志位，也就是包的类型，用于标识TCP连接的状态。&lt;br&gt;（5）Window就是著名的滑动窗口，用于流量控制的。&lt;/p&gt;
&lt;h3 id=&quot;TCP连接的建立和终止&quot;&gt;&lt;a href=&quot;#TCP连接的建立和终止&quot; class=&quot;headerlink&quot; title=&quot;TCP连接的建立和终止&quot;&gt;&lt;/a&gt;TCP连接的建立和终止&lt;/h3&gt;&lt;p&gt;很多人对于TCP协议最深的印象应该就是三次握手和四次挥手了。那么，这中间的过程是怎样的呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lP4JfiN.jpg&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;h4 id=&quot;三次握手建立连接&quot;&gt;&lt;a href=&quot;#三次握手建立连接&quot; class=&quot;headerlink&quot; title=&quot;三次握手建立连接&quot;&gt;&lt;/a&gt;三次握手建立连接&lt;/h4&gt;&lt;p&gt;1）请求端（C/S模型中的Client）发送一个SYN字段指明客户打算连接的服务器的端口，以及初始序号x。&lt;br&gt;2）服务器发挥包含服务器初始序号y的SYN报文段作为应答。同时，将确认序号设置为客户的序号加1以对客户的SYN报文段进行确认。一个SYN将占用一个序号。&lt;br&gt;3）客户必须将确认序号设置为服务器的序号加1以对服务器的SYN报文段进行确认。&lt;/p&gt;
&lt;h4 id=&quot;四次挥手终止连接&quot;&gt;&lt;a href=&quot;#四次挥手终止连接&quot; class=&quot;headerlink&quot; title=&quot;四次挥手终止连接&quot;&gt;&lt;/a&gt;四次挥手终止连接&lt;/h4&gt;&lt;p&gt;这是由TCP的半关闭造成的。因为TCP连接是全双工，因此每个方向都必须单独的关闭，都需要FIN和ACK。收到一个FIN只意味着在这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。&lt;br&gt;如上图，客户执行主动关闭，发送序列号(seq)为x+1的FIN，服务器收到这个FIN，发回ACK(seq=x+3)。接着服务器关闭它的连接，导致它的TCP端发送一个FIN(seq=y+1)，客户端必须发回一个确认，即ACK(seq=y+2)。&lt;/p&gt;
&lt;h4 id=&quot;连接建立的超时&quot;&gt;&lt;a href=&quot;#连接建立的超时&quot; class=&quot;headerlink&quot; title=&quot;连接建立的超时&quot;&gt;&lt;/a&gt;连接建立的超时&lt;/h4&gt;&lt;p&gt;实际中，有很多情况导致无法建立连接。比如，当Server收到Client的SYN并发回SYN-ACK后Client掉线了，Server端没有收到Client发回的ACK。这种情况下，Server端会重法SYN-ACK。在Linux下，默认重法次数为5此，重试的间隔时间从1s开始每次都翻倍，如果5此后仍旧没有收到，才会断开这个连接。               &lt;/p&gt;
&lt;h3 id=&quot;TCP状态机&quot;&gt;&lt;a href=&quot;#TCP状态机&quot; class=&quot;headerlink&quot; title=&quot;TCP状态机&quot;&gt;&lt;/a&gt;TCP状态机&lt;/h3&gt;&lt;p&gt;下面这个图非常重要，TCP状态机和状态之间的转换是分析网络状态、故障、优化等的重中之重。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/m6HYlnp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要重点关注的：&lt;br&gt;（1）MSL和TIME_WAIT状态。据说，这是90%的互联网后台岗位面试都会考的内容。&lt;br&gt;每个具体TCP实现必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为TCP报文段封装在IP数据包在网络内传输，而IP数据包有限制其生存时间的TTL字段。&lt;br&gt;当TCP执行一个主动关闭，并发回最后一个ACK（收到对端的FIN，并发送ACK），该连接必须在TIME_WAIT状态停留的时间为2MSL。这样做可以确保有足够的时间让对端收到ACK，如果被动关闭的那方没有收到ACK，就会触发被动端重发最后的FIN。一来一去正好2MSL。此外，这样做的另一个结果是标识这个TCP连接的四元组在2MSL期间不能再被使用，只能再2MSL结束后才能再被使用。&lt;br&gt;（2）TIME_WAIT过多&lt;br&gt;出现问题了，在高并发短连接的TCP服务器上，当服务器处理完请求后立刻主动关闭连接，这样，就会有很多连接处在TIME_WAIT状态，会消耗许多系统资源。如果客户端的并发量持续很高，部分客户端就会显示连接不上。这时，可以通过设置tcp_tw_reuse和tcp_tw_recycle两个参数，前者表示开启重用，允许将处于TIME_WAIT的Socket重新用于新的TCP连接，后者表示开启TCP连接中TIME_WAIT socket的快速回收。&lt;br&gt;其实，个人觉得最好的办法就是想方设法让Client来关闭连接，这样Server作为被动关闭的一方，就不存在上述问题了。&lt;br&gt;（3）SYN Flood攻击&lt;br&gt;了解TCP三次握手后，很容易明白SYN Flood攻击的来源了，在客户端给服务器发了建立连接的SYN后，就下线了，于是服务器需要默认等待63s才会断开连接，这样，攻击者就可以把服务器的SYN连接队列耗尽，让正常的连接请求不能处理。于是，Linux下有一个tcp_syncookies的参数来应对攻击，当SYN队列满之后，TCP会根据源地址端口、目标地址端口和时间戳打造一个特别的Sequence Number（SYN Cookie）发回客户端，如果是攻击者则不会有相应，如果是正常连接，则会把这个SYN Cookie发回，然后服务端通过cookie建立连接。&lt;/p&gt;
&lt;h3 id=&quot;TCP保活定时器&quot;&gt;&lt;a href=&quot;#TCP保活定时器&quot; class=&quot;headerlink&quot; title=&quot;TCP保活定时器&quot;&gt;&lt;/a&gt;TCP保活定时器&lt;/h3&gt;&lt;p&gt;许多时候服务器希望知道客户主机是否崩溃并关机或者崩溃又重新启动这样的非正常情况，这就需要保活功能。如果一个特定的连接在固定时间之内没有任何动作，则服务器就向客户端发送一个探查报文。&lt;br&gt;保活功能的实现由两种方式，一是应用层面的心跳机制。通过自定义心跳消息头来完成保活功能。另一种就是TCP自带的保活功能。而这也是许多协议专家所争论的点：到底保活功能应该再哪一层实现。对于这两种方式，我认为应用层面的心跳机制具有灵活、扩展性强的特点，可以随意控制，不依赖与协议，但是也增加了开发的复杂程度。而TCP的保活功能，使用简单，减少了应用层代码的复杂度。所以，开发者可以根据实际的应用场景选择适合的保活功能的实现方式。&lt;/p&gt;
&lt;h3 id=&quot;待续&quot;&gt;&lt;a href=&quot;#待续&quot; class=&quot;headerlink&quot; title=&quot;待续&quot;&gt;&lt;/a&gt;待续&lt;/h3&gt;&lt;p&gt;这一篇是TCP协议的一些基础知识，下一篇将学习较复杂的滑动窗口、重传与拥塞控制。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近，在学习和科研中，越来越发现自己对于TCP协议的掌握不够，作为一个成天和网络打交道的人，TCP/IP简直是我们最核心的知识之一，所以，准备利用接下来准备考试的间隙时间，结合《TCP/IP详解 卷一：协议》再重新学习和巩固一下TCP。          &lt;/p&gt;
&lt;h3 
    
    </summary>
    
    
      <category term="network/linux" scheme="http://blog.dujiong.net/tags/network-linux/"/>
    
  </entry>
  
  <entry>
    <title>C++构造函数一些常见问题分析</title>
    <link href="http://blog.dujiong.net/2016/06/05/cpp-constructor/"/>
    <id>http://blog.dujiong.net/2016/06/05/cpp-constructor/</id>
    <published>2016-06-05T08:58:57.000Z</published>
    <updated>2016-08-06T12:49:26.202Z</updated>
    
    <content type="html">&lt;p&gt;近期，在阅读陈皓老师博客的时候，看到几年前的一篇&lt;a href=&quot;http://coolshell.cn/articles/804.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于C++构造函数的FAQ&lt;/a&gt;，想来自己学习C++也有段时间了，就尝试着回答一下，并乘机总结一下C++构造函数的一些常见问题，记录于此。&lt;br&gt;借此机会逛了逛C++ FAQ，以前都不了解，以后得多去学习学习，检验下自己的C++基础知识扎不扎实。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&quot;构造函数是用来干什么的？&quot;&gt;&lt;a href=&quot;#构造函数是用来干什么的？&quot; class=&quot;headerlink&quot; title=&quot;构造函数是用来干什么的？&quot;&gt;&lt;/a&gt;构造函数是用来干什么的？&lt;/h3&gt;&lt;p&gt;顾名思义，构造函数是用来从无到有的构建对象。它将一些（连续的）最小粒度的内存单元变成对象。它要初始化对象内部所定义的域，还可以分配资源(内存、文件、套接字等)。&lt;/p&gt;
&lt;h3 id=&quot;List-x-和List-x-有什么不同？&quot;&gt;&lt;a href=&quot;#List-x-和List-x-有什么不同？&quot; class=&quot;headerlink&quot; title=&quot;List x;和List x();有什么不同？&quot;&gt;&lt;/a&gt;List x;和List x();有什么不同？&lt;/h3&gt;&lt;p&gt;List x;是声明了一个类List的对象x，而List x()是声明了一个函数x()，它返回一个List对象。二者自然是有本质的差别。 &lt;/p&gt;
&lt;h3 id=&quot;一个类的构造函数可否调用另一个构造函数来初始化自己？&quot;&gt;&lt;a href=&quot;#一个类的构造函数可否调用另一个构造函数来初始化自己？&quot; class=&quot;headerlink&quot; title=&quot;一个类的构造函数可否调用另一个构造函数来初始化自己？&quot;&gt;&lt;/a&gt;一个类的构造函数可否调用另一个构造函数来初始化自己？&lt;/h3&gt;&lt;p&gt;不能。如果调用另一个构造函数，编译器将初始化一个临时局部对象，而不是初始化this对象。&lt;/p&gt;
&lt;h3 id=&quot;是否Fred类的默认的构造函数就一定是Fred-Fred-？&quot;&gt;&lt;a href=&quot;#是否Fred类的默认的构造函数就一定是Fred-Fred-？&quot; class=&quot;headerlink&quot; title=&quot;是否Fred类的默认的构造函数就一定是Fred::Fred()？&quot;&gt;&lt;/a&gt;是否Fred类的默认的构造函数就一定是Fred::Fred()？&lt;/h3&gt;&lt;p&gt;不，默认构造函数是可以带提供默认值的参数的。&lt;br&gt;比如这里：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Fred
{
    public:
        Fred(int i=1);
};
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;如果要创建一个Fred对象数组，什么样的构造函数会被调用？&quot;&gt;&lt;a href=&quot;#如果要创建一个Fred对象数组，什么样的构造函数会被调用？&quot; class=&quot;headerlink&quot; title=&quot;如果要创建一个Fred对象数组，什么样的构造函数会被调用？&quot;&gt;&lt;/a&gt;如果要创建一个Fred对象数组，什么样的构造函数会被调用？&lt;/h3&gt;&lt;p&gt;Fred类的默认构造函数。&lt;br&gt;当然，更多的情况下我们都会选择使用标准容器vector，而且vector的一大优势是可以指定Fred的构造函数，而不仅仅是默认构造函数。&lt;/p&gt;
&lt;h3 id=&quot;构造函数初始化成员变量时，用”初始化列表”还是”赋值”？&quot;&gt;&lt;a href=&quot;#构造函数初始化成员变量时，用”初始化列表”还是”赋值”？&quot; class=&quot;headerlink&quot; title=&quot;构造函数初始化成员变量时，用”初始化列表”还是”赋值”？&quot;&gt;&lt;/a&gt;构造函数初始化成员变量时，用”初始化列表”还是”赋值”？&lt;/h3&gt;&lt;p&gt;无疑，初始化列表，在很多C++语法方面的书上都会讲，这里再总结一下。&lt;br&gt;使用”初始化列表”最大的好处是可以提高性能，比如使用 Fred::Fread() :x_(x)来初始化成员变量x_，x_直接由x构造–编译器不会产生对象的拷贝。&lt;br&gt;而通过赋值的话，&lt;code&gt;Fred::Fred() { x_ = x }&lt;/code&gt;，x作为一个临时对象被建立，并传递给x_成员作为赋值操作，然后临时对象x在语句的结束被析构，所以，这样的效率是较低的。&lt;br&gt;当然，如果x_的类型是int/char这样的内置类型的话，性能是没有区别的。总之，使用初始化列表来初始化成员变量是更佳的选择。&lt;/p&gt;
&lt;h3 id=&quot;构造函数初始化列表的初始化顺序？&quot;&gt;&lt;a href=&quot;#构造函数初始化列表的初始化顺序？&quot; class=&quot;headerlink&quot; title=&quot;构造函数初始化列表的初始化顺序？&quot;&gt;&lt;/a&gt;构造函数初始化列表的初始化顺序？&lt;/h3&gt;&lt;p&gt;C++初始化成员变量的顺序是按照它们定义的顺序，而非在初始化列表的顺序。&lt;br&gt;如果有继承关系的话，先基类，再派生类。&lt;/p&gt;
&lt;h3 id=&quot;在构造函数中用this指针是否有问题？&quot;&gt;&lt;a href=&quot;#在构造函数中用this指针是否有问题？&quot; class=&quot;headerlink&quot; title=&quot;在构造函数中用this指针是否有问题？&quot;&gt;&lt;/a&gt;在构造函数中用this指针是否有问题？&lt;/h3&gt;&lt;p&gt;一般情况下是不应该的，因为在构造阶段，this对象还没有完全形成。&lt;br&gt;当然也不绝对，比如构造函数的函数体或其中调用的函数可以访问基类中声明的数据成员或类的静态数据成员，这时它们都已经完整的建立起来了。&lt;br&gt;所以，一般情况下不这样做，如果要，也得记住，唯一准则是：这时this指针已经完整构造形成了。&lt;/p&gt;
&lt;h3 id=&quot;什么是“命名的构造函数法”？&quot;&gt;&lt;a href=&quot;#什么是“命名的构造函数法”？&quot; class=&quot;headerlink&quot; title=&quot;什么是“命名的构造函数法”？&quot;&gt;&lt;/a&gt;什么是“命名的构造函数法”？&lt;/h3&gt;&lt;p&gt;为类的用户提供一种更安全、直接的构造。&lt;br&gt;因为构造函数的特殊性，函数名和类名相同。因此，区分类的不同的构造函数只能通过参数列表。但如果有多个构造函数，很好地区分它们并不容易。&lt;br&gt;命名的构造函数法就是在private或protected内声明类所有的构造函数，并提供返回对象的public static函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Point
{
    public:
        static Point rectangular(float x, float y);
        static Point polar(float radius, float angle);
    private:
        Point(float x, float y);
        float x_, y_;
};    
inline Point::Point(float x, float y) : x_(x), y_(y) {}
inline Point::rectangular(float x, float y) { return Point(x, y); }
inline Point::polar(float radius, float angle)
{
    return Point(radius*cos(angle), radius*sin(angle));
}
int main()
{
    Point p1 = Point::rectangular(5.0,5.0);
    Point p2 = Point::polar(5.0,5.0);
}    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;为什么不能在构造函数的初始化列表中初始化static数据？&quot;&gt;&lt;a href=&quot;#为什么不能在构造函数的初始化列表中初始化static数据？&quot; class=&quot;headerlink&quot; title=&quot;为什么不能在构造函数的初始化列表中初始化static数据？&quot;&gt;&lt;/a&gt;为什么不能在构造函数的初始化列表中初始化static数据？&lt;/h3&gt;&lt;p&gt;因为static数据成员是属于类的，而不是类的对象，所以，必须显示定义类的静态数据成员。&lt;/p&gt;
&lt;h3 id=&quot;为什么有静态数据成员的类得到了链接错误？&quot;&gt;&lt;a href=&quot;#为什么有静态数据成员的类得到了链接错误？&quot; class=&quot;headerlink&quot; title=&quot;为什么有静态数据成员的类得到了链接错误？&quot;&gt;&lt;/a&gt;为什么有静态数据成员的类得到了链接错误？&lt;/h3&gt;&lt;p&gt;因为如上一条所述，static数据成员必须显示定义在一个编译单元中。&lt;br&gt;通常在在.cpp源文件中定义static数据成员。&lt;/p&gt;
&lt;h3 id=&quot;什么是”static-initialization-order-fiasco”？&quot;&gt;&lt;a href=&quot;#什么是”static-initialization-order-fiasco”？&quot; class=&quot;headerlink&quot; title=&quot;什么是”static initialization order fiasco”？&quot;&gt;&lt;/a&gt;什么是”static initialization order fiasco”？&lt;/h3&gt;&lt;p&gt;还是初始化顺序的问题，比如两个源文件a.cpp和b.cpp中分别有两个静态对象a和b。假定a对象的构造函数会调用b对象的某些成员函数。由于static对象构造在main()开始之前，且顺序未知，所以，很可能发生a对象的构造函数先运行，当其想调用b对象的成员函数时，发现b对象还没被构造。&lt;/p&gt;
&lt;h3 id=&quot;如何处理构造函数的失败？&quot;&gt;&lt;a href=&quot;#如何处理构造函数的失败？&quot; class=&quot;headerlink&quot; title=&quot;如何处理构造函数的失败？&quot;&gt;&lt;/a&gt;如何处理构造函数的失败？&lt;/h3&gt;&lt;p&gt;当然是抛异常啦。关于C++的异常机制，后面还得好好学学。&lt;/p&gt;
&lt;h3 id=&quot;explicit关键字的作用？&quot;&gt;&lt;a href=&quot;#explicit关键字的作用？&quot; class=&quot;headerlink&quot; title=&quot;explicit关键字的作用？&quot;&gt;&lt;/a&gt;explicit关键字的作用？&lt;/h3&gt;&lt;p&gt;使用explicit就是告诉编译器禁止隐式转换。&lt;br&gt;下面通过实例说明。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Foo
{
    public:
        Foo(int x);
        operator int();
};        
int main()
{
    Foo a = 42;                  
    Foo b(42);              
    Foo c = (Foo)(42);      //显示转换
    int d = c;
    return 0;    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上都会编译成功，需要注意的是main()中的第一、四行，都涉及到了隐式转换。&lt;br&gt;但是，有些时候需要禁止这样的隐式转换。就得使用explicit关键字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Foo
{
    public:
        explicit Foo(int x);
        explicit operator int();
};     
int main()
{
    Foo a = 42;        //error
    Foo b(42);
    Foo c = (Foo)(42);
    int d = c;        //error
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样的话，main()中的隐式转换（第一、四行）将不被允许。&lt;/p&gt;
&lt;h3 id=&quot;待续&quot;&gt;&lt;a href=&quot;#待续&quot; class=&quot;headerlink&quot; title=&quot;待续&quot;&gt;&lt;/a&gt;待续&lt;/h3&gt;&lt;p&gt;C++博大精深，构造函数又是其中非常重要的部分，后面还需要继续学习、补充。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近期，在阅读陈皓老师博客的时候，看到几年前的一篇&lt;a href=&quot;http://coolshell.cn/articles/804.html&quot;&gt;关于C++构造函数的FAQ&lt;/a&gt;，想来自己学习C++也有段时间了，就尝试着回答一下，并乘机总结一下C++构造函数的一些常见问题，记录于此。&lt;br&gt;借此机会逛了逛C++ FAQ，以前都不了解，以后得多去学习学习，检验下自己的C++基础知识扎不扎实。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.dujiong.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>常见并发网络服务程序设计方案</title>
    <link href="http://blog.dujiong.net/2016/05/28/concurrent-server-conclusion/"/>
    <id>http://blog.dujiong.net/2016/05/28/concurrent-server-conclusion/</id>
    <published>2016-05-28T02:14:00.000Z</published>
    <updated>2016-08-06T07:52:10.237Z</updated>
    
    <content type="html">&lt;p&gt;《Unix网络编程(第三版)》(以下简称[UNP])中第三十章”客户/服务器程序设计范式”总结了一些常见的并发网络服务程序设计方案，而随着互联网、大数据等浪潮的兴起，业界对服务器程序的高并发能力、稳定性等提出了更高的要求，客户/服务器程序设计范式也在随着时代的需求而不断改进和提升，下面就对常见的并发网络服务程序设计方案作简单总结。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;《Unix网络编程》传统方案&quot;&gt;&lt;a href=&quot;#《Unix网络编程》传统方案&quot; class=&quot;headerlink&quot; title=&quot;《Unix网络编程》传统方案&quot;&gt;&lt;/a&gt;《Unix网络编程》传统方案&lt;/h3&gt;&lt;h4 id=&quot;方案0&quot;&gt;&lt;a href=&quot;#方案0&quot; class=&quot;headerlink&quot; title=&quot;方案0&quot;&gt;&lt;/a&gt;方案0&lt;/h4&gt;&lt;p&gt;这并不是并发服务器，正如在[UNP]第一章入门的时间获取客户/服务器程序中所看到的，一次只能服务一个客户。服务器通过循环监听套接字等待连接，在连接建立以后处理所需的逻辑。对应到程序中，服务器和客户端都只是简单的调用socket API，完成连接和处理工作。&lt;/p&gt;
&lt;h4 id=&quot;方案1&quot;&gt;&lt;a href=&quot;#方案1&quot; class=&quot;headerlink&quot; title=&quot;方案1&quot;&gt;&lt;/a&gt;方案1&lt;/h4&gt;&lt;p&gt;这是传统的并发网络编程方案，也是[UNP]中第一个阐述的并发方案，称之为fork()-per-client或process-per-connection，即为每一个客户连接新建一个子进程(fork())，在子进程调用handler()处理客户业务，从而同时服务多个客户端。&lt;br&gt;这种方案适合并发连接数不大、计算响应的工作量远大于fork()的开销等情况，考虑到操作系统对运行服务器的用户能够同时拥有多少子进程的限制和为每个客户现场fork()一个子进程的开销。&lt;/p&gt;
&lt;h4 id=&quot;方案2&quot;&gt;&lt;a href=&quot;#方案2&quot; class=&quot;headerlink&quot; title=&quot;方案2&quot;&gt;&lt;/a&gt;方案2&lt;/h4&gt;&lt;p&gt;对方案1的优化，采用进程池，即在启动阶段预先派生一定数量的子进程，当各个客户连接到达时，这些子进程立即就能为它们服务。&lt;br&gt;这种技术的优点在于无须引入父进程执行fork()的开销就能处理新到的客户。缺点则是父进程必须在服务器启动阶段猜测需要预先派生多少子进程。[UNP]中详细的说明了该方案以及对该方案的一些修订，个人觉得最后一个修订版本是一个较好且实用的方案，即只让父进程调用accept()，然后把所接受的已连接套接字”传递给”（描述符传递）某个子进程，父进程随后关闭这个套接字，由子进程处理，父子进程之间通过管道通信。&lt;/p&gt;
&lt;h4 id=&quot;方案3&quot;&gt;&lt;a href=&quot;#方案3&quot; class=&quot;headerlink&quot; title=&quot;方案3&quot;&gt;&lt;/a&gt;方案3&lt;/h4&gt;&lt;p&gt;传统Java网络编程方案thread-per-connection，即为每个客户连接新建一个线程，由子线程调用handler()处理客户业务，从而同时服务多个客户端。&lt;br&gt;这种方案使用线程来取代子进程，所以开销要比方案1小。&lt;/p&gt;
&lt;h4 id=&quot;方案4&quot;&gt;&lt;a href=&quot;#方案4&quot; class=&quot;headerlink&quot; title=&quot;方案4&quot;&gt;&lt;/a&gt;方案4&lt;/h4&gt;&lt;p&gt;类似于方案2，对方案3中预先创建线程池，就不再赘述。&lt;/p&gt;
&lt;h3 id=&quot;《Unix网络编程》传统方案总结&quot;&gt;&lt;a href=&quot;#《Unix网络编程》传统方案总结&quot; class=&quot;headerlink&quot; title=&quot;《Unix网络编程》传统方案总结&quot;&gt;&lt;/a&gt;《Unix网络编程》传统方案总结&lt;/h3&gt;&lt;p&gt;上述几种方案都是阻塞式网络编程，程序通常会阻塞在系统调用上。比如，当一个进程/线程阻塞在读网络流的时候，但同时程序又想处理键盘输入，就麻烦了。&lt;br&gt;所以，一种常见的方法是使用IO多路复用，使用select/poll/epoll这类的多路选择器（本质是事件驱动），让一个线程能处理多个连接。IO复用其实复用的不是IO连接，而是复用线程。使用IO复用几乎肯定要配合非阻塞IO，而使用非阻塞IO肯定要使用应用层buffer。这样，就诞生了现代网络编程中以事件驱动为核心的Reactor模式，继而出现了一些通用的Reactor库/框架，比如libevent、muduo、Netty等。&lt;/p&gt;
&lt;h3 id=&quot;Reactor方案&quot;&gt;&lt;a href=&quot;#Reactor方案&quot; class=&quot;headerlink&quot; title=&quot;Reactor方案&quot;&gt;&lt;/a&gt;Reactor方案&lt;/h3&gt;&lt;h4 id=&quot;方案5&quot;&gt;&lt;a href=&quot;#方案5&quot; class=&quot;headerlink&quot; title=&quot;方案5&quot;&gt;&lt;/a&gt;方案5&lt;/h4&gt;&lt;p&gt;基本的单线程Reactor方案，使用IO复用，可以同时服务多个连接，但是由于它是单线程的，比较适合IO密集的应用，不太适合CPU密集型的应用，不能发挥多核硬件的能力。&lt;/p&gt;
&lt;h4 id=&quot;方案6&quot;&gt;&lt;a href=&quot;#方案6&quot; class=&quot;headerlink&quot; title=&quot;方案6&quot;&gt;&lt;/a&gt;方案6&lt;/h4&gt;&lt;p&gt;类似于[UNP]中的解决方案，建立客户连接后，不在Reactor线程中计算，而是创建一个新线程来计算，可以充分利用多核CPU的优势。这个方案需要考虑的是线程执行的不确定性，即同时创建多个线程去处理同一个连接上收到的多个请求，那么算出结果的次序是不确定的。此外，还有一个连接到来创建线程的开销，可以通过下述方案7中的线程池避免。&lt;/p&gt;
&lt;h4 id=&quot;方案7&quot;&gt;&lt;a href=&quot;#方案7&quot; class=&quot;headerlink&quot; title=&quot;方案7&quot;&gt;&lt;/a&gt;方案7&lt;/h4&gt;&lt;p&gt;为弥补为每个请求创建线程的缺陷，使用固定大小的线程池解决。全部的IO工作都在一个Reator线程完成，而计算任务交给线程池。这种模型适用于计算任务彼此独立，并且IO压力不大的情况。当IO的压力较大时，一个Reactor线程很可能处理不过来了，就可以考虑下方案8。&lt;/p&gt;
&lt;h4 id=&quot;方案8&quot;&gt;&lt;a href=&quot;#方案8&quot; class=&quot;headerlink&quot; title=&quot;方案8&quot;&gt;&lt;/a&gt;方案8&lt;/h4&gt;&lt;p&gt;该方案的特点是one loop per thread，如下图所示，有一个main Reactor负责accept()连接，然后把连接挂在某个sub Reactor中，这样该连接的所有操作都在sub Reactor所处的线程中完成。这是muduo和Netty内置的多线程方案。&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/kccnUkP.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Reactor pool的大小(线程数)通常根据CPU数目确定，这样程序的总体处理能力不会随着连接数增加而下降。此外， 由于一个连接完全由一个线程管理，请求的顺序就有了保证。&lt;br&gt;与前面的Reactor+thread pool相比，该方案减少了进出thread pool的两次上下文切换，在把多个连接分散到多个Reactor线程之后，小规模计算可以在当前IO线程完成并返回结果，从而降低响应的延迟。&lt;/p&gt;
&lt;h4 id=&quot;方案9&quot;&gt;&lt;a href=&quot;#方案9&quot; class=&quot;headerlink&quot; title=&quot;方案9&quot;&gt;&lt;/a&gt;方案9&lt;/h4&gt;&lt;p&gt;将上述两种方案结合，既使用多个Reactor来处理IO，又使用线程池来处理计算，如下图所示。这种方案适合既有突发IO（利用多线程处理多个连接上的IO），又有突发计算的应用(利用线程池把一个连接上的计算任务分配给多个线程去做)。&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/2bBaThf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;方案10&quot;&gt;&lt;a href=&quot;#方案10&quot; class=&quot;headerlink&quot; title=&quot;方案10&quot;&gt;&lt;/a&gt;方案10&lt;/h4&gt;&lt;p&gt;Reactor in processes,采用多进程实现。这是Nginx的内置方案，待后续研究Nginx的时候再详述。&lt;/p&gt;
&lt;h3 id=&quot;Reactor方案总结&quot;&gt;&lt;a href=&quot;#Reactor方案总结&quot; class=&quot;headerlink&quot; title=&quot;Reactor方案总结&quot;&gt;&lt;/a&gt;Reactor方案总结&lt;/h3&gt;&lt;p&gt;对上述Reactor模型的方案进行了简单总结，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/n4bAxFY.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中,C1和C2是根据实际情况设置的常数，与CPU数目、用户业务有关。&lt;/p&gt;
&lt;p&gt;参考: 《Linux多线程服务端编程》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;《Unix网络编程(第三版)》(以下简称[UNP])中第三十章”客户/服务器程序设计范式”总结了一些常见的并发网络服务程序设计方案，而随着互联网、大数据等浪潮的兴起，业界对服务器程序的高并发能力、稳定性等提出了更高的要求，客户/服务器程序设计范式也在随着时代的需求而不断改进和提升，下面就对常见的并发网络服务程序设计方案作简单总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="network/linux" scheme="http://blog.dujiong.net/tags/network-linux/"/>
    
      <category term="muduo" scheme="http://blog.dujiong.net/tags/muduo/"/>
    
  </entry>
  
  <entry>
    <title>浅谈C++值语义和对象语义</title>
    <link href="http://blog.dujiong.net/2016/05/15/cplusplus-sematics/"/>
    <id>http://blog.dujiong.net/2016/05/15/cplusplus-sematics/</id>
    <published>2016-05-15T11:29:20.000Z</published>
    <updated>2016-08-02T06:05:27.187Z</updated>
    
    <content type="html">&lt;h3 id=&quot;值语义和对象语义&quot;&gt;&lt;a href=&quot;#值语义和对象语义&quot; class=&quot;headerlink&quot; title=&quot;值语义和对象语义&quot;&gt;&lt;/a&gt;值语义和对象语义&lt;/h3&gt;&lt;p&gt;值语义(value sematics)指的是对象的拷贝与原对象无关，拷贝之后就与原对象脱离关系。C++的内置类型都是值语义，如bool/int/double等，标准库里的pair&amp;lt;&amp;gt;,vector&amp;lt;&amp;gt;,map&amp;lt;&amp;gt;，string等类型也都是值语义。Java语言的primitive types(原生数据类型)也是值语义。&lt;br&gt;与值语义(object sematics)对应的是”对象语义”，或者也叫做”引用语义”。对象语义指的是面向对象意义下的对象，对象是禁止拷贝的或拷贝后与原来的对象存在关联。比如，拷贝一个Employee对象是没有意义的，一个雇员不会变成两个雇员。同样，muduo库中的TcpConnection，显然也是不可复制的，因为牵涉到系统的资源。Java里面的class对象都是对象语义/引用语义。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;下面举Java和C++几个简单的例子看值语义和对象语义:&lt;/p&gt;
&lt;h4 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;int a = 8;
int b = a;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的a，b都是int， 属于Java中原生数据类型，他们的特点是复制后二者再无关联。它们表现出来是两个value。&lt;br&gt;与他们形成对比的是用户自定义的class，如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Student a1 = new Student(&amp;quot;dujiong&amp;quot;, 23);
Student a2 = a1;
a2.setAge(25);    
System.out.println(a1.getAge());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码输出为25，因为第二行语句，导致a和b指向的是同一个对象，修改a2也会影响a1，所以表现的行为是一种reference。&lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;p&gt;如前所述，C++的内置类型、标准库容器如vector&amp;lt;&amp;gt;，map&amp;lt;&amp;gt;等都是值语义，C++要求凡是可以放入容器的元素都必须具备值语义，即必须具备拷贝的能力，放入标准容器的元素和之前的元素没有任何的关联。&lt;br&gt;而C++的普通类呢?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Book
{
    private:
        string isbn_;
        double price_;
        int amount_;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果以下面的代码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Book a1;
Book a2 = a1;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么a1和a2复制后将没有任何关联，他们的表现属于值语义。&lt;/p&gt;
&lt;h3 id=&quot;值语义与C-语言&quot;&gt;&lt;a href=&quot;#值语义与C-语言&quot; class=&quot;headerlink&quot; title=&quot;值语义与C++语言&quot;&gt;&lt;/a&gt;值语义与C++语言&lt;/h3&gt;&lt;p&gt;C++的class本质上是值语义的。C++的设计初衷是让用户定义的类型(class)能像内置类型一样工作，具有同等的地位。为此，C++做了妥协:&lt;br&gt;(1) class的layout与C struct一样，没有额外的开销，定义一个”只包含一个int成员的class”的对象开销和一个int一样。&lt;br&gt;(2) class可以在stack上创建，也可以在heap上创建。。&lt;br&gt;(3) class的data member默认都是uninitialized。&lt;br&gt;(4) class的数组是一个个class对象挨着，没有额外的indirection。&lt;br&gt;(5) 编译器为class默认生成copy constructor和assignment operator。其他语言没有copy constructor，也不允许重载assignment operator。C++的对象默认是可以拷贝的。&lt;br&gt;(6) 当class类型传入函数时，默认是make a copy(除非参数声明为reference)。&lt;br&gt;(7) 当函数返回一个class type时，只能通过make a copy(C++不得不定义RVO来解决性能问题)。&lt;br&gt;(8) 当class type为成员时，数据成员时嵌入的。&lt;br&gt;C++这样的设计带来了性能上的好处。比如在C++里定义复数类(complex&lt;double&gt;class)和其数组(array)、向量(vector)，它们的layout分别是:&lt;/double&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://i.imgur.com/xN0fihh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而如果在Java中定义同样的结构，就不一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ptaBium.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java中每个object都有header。对比Java，C++的对象模型更紧凑。&lt;/p&gt;
&lt;h3 id=&quot;值语义与生命期&quot;&gt;&lt;a href=&quot;#值语义与生命期&quot; class=&quot;headerlink&quot; title=&quot;值语义与生命期&quot;&gt;&lt;/a&gt;值语义与生命期&lt;/h3&gt;&lt;p&gt;值语义的一个巨大好处是生命期管理很简单，就像你不需要操心基本数据类型的生命期一样。值语义的对象要么是栈上对象，要么作为其他对象的成员(一个成员函数使用自己的数据成员对象)。而，对象语义由于不能拷贝，只能通过指针或引用来使用它。而一旦使用指针或引用来操作对象，那么就要担心所指的对象是否已被释放，而这也是C++ bug的主要来源。此外，C++只能通过指针或引用来获得多态，所以，在C++中进行继承和多态的面向对象编程中，资源管理成为了一大难题。            &lt;/p&gt;
&lt;h4 id=&quot;模型1&quot;&gt;&lt;a href=&quot;#模型1&quot; class=&quot;headerlink&quot; title=&quot;模型1&quot;&gt;&lt;/a&gt;模型1&lt;/h4&gt;&lt;p&gt;模型1: a Parent has a Child, a Child knows his/her Parent&lt;br&gt;Java中很好些，不用担心内存泄露，也不用担心空悬指针。    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Parent{
    private Child myChild;    
}
public class Child{
    private Parent myParent;    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只要正确初始化myChild和myParent即可。&lt;br&gt;而在C++里就要为资源管理费一番脑筋:Parent 和 Child 都代表的是真人，肯定是不能拷贝的，因此具有对象语义。Parent 是直接持有 Child 吗？抑或 Parent 和 Child 通过指针互指？Child 的生命期由 Parent 控制吗？&lt;br&gt;直接但是易错的写法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Child;
class Parent : boost::noncopyable
{
    private:
        Child* myChild;
};

class Child : boodt::noncopyable
{
    private:
        Parent* myParent;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么，直接使用指针作为成员，那么如何确保指针的有效性？如何防止出现空悬指针？Child 和 Parent 由谁负责释放？在释放某个 Parent 对象的时候，如何确保程序中没有指向它的指针？在释放某个 Child 对象的时候，如何确保程序中没有指向它的指针？&lt;br&gt;这一系列问题都是C++面向对象编程令人头疼的问题。现在可以使用boost智能指针解决(C++11引入,用栈上对象管理堆上对象的生命期），借助于智能指针把对象语义转换为值语义，从而解决对象生命期问题：让Parent持有Child的智能指针，同时让Child持有Parent的智能指针，这样始终引用对方的时候就不用担心出现空悬指针。当然，其中一个智能应该是weak reference，否则会出现循环引用，导致内存泄露。&lt;br&gt;所以，如果Parent拥有Child，Child的生命期由其Parent控制，Child的生命期小于Parent，那么代码：     &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Parent;
class Child : boost::noncopyable
{
    public:
        explicit Child(Parent* myParent) : myParent_(myParent)
        { }
    private:
        Parent* myParent_;
};
class Parent : boost::noncopyable
{
    public:
        Parent() : myChild(new Child(this))
        { }
    private:
        boost::scoped_ptr&amp;lt;Child&amp;gt; myChild;
}; 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;模型2&quot;&gt;&lt;a href=&quot;#模型2&quot; class=&quot;headerlink&quot; title=&quot;模型2&quot;&gt;&lt;/a&gt;模型2&lt;/h4&gt;&lt;p&gt;模型2: a Child has parents:mom and dad; a Parent has one or more Child; a Parent knows his/her spouser&lt;br&gt;Java描述还是很简单，垃圾收集会搞定对象生命期。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Parent{
    private Parent mySpouser;
    private ArrayList&amp;lt;Child&amp;gt; myChildren;    
}
public class Child{
    private Parent myMom;
    private Parent myDad;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而如果用C++实现，还是需要借助于智能指针将裸指针转化为值语义。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Parent;
typedef boost::shared_ptr&amp;lt;Parent&amp;gt; ParentPtr;

class Child : boost::noncopyable
{
    public:
        explicit Child(const ParentPtr&amp;amp; myMom, const ParentPtr&amp;amp; myDad)
        : myMom_(myMom), myDad_(myDad)
        { }
    private:
        boost::weak_ptr&amp;lt;Parent&amp;gt; myMom_;
        boost::weak_ptr&amp;lt;Parent&amp;gt; myDad_;
};

typedef boost::shared_ptr&amp;lt;Child&amp;gt; ChildPtr;

class Parent :　boost::noncopyable
{
    public:
        Parent(){}
        void setSpouser(const ParentPtr&amp;amp; spouser)
        {
            mySpouser_ = spouser;
        }
        void addChild(const ChildPtr&amp;amp; child)
        {
            myChildren_.push_back(child);    
        }
    private:
        boost::weak_ptr&amp;lt;Parent&amp;gt; mySpouser_;
        std::vector&amp;lt;ChildPtr&amp;gt; myChildren_;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看出，如果不使用智能指针，使用C++面向对象编程，有效的资源管理将会很困难。&lt;/p&gt;
&lt;h3 id=&quot;待续&quot;&gt;&lt;a href=&quot;#待续&quot; class=&quot;headerlink&quot; title=&quot;待续&quot;&gt;&lt;/a&gt;待续&lt;/h3&gt;&lt;p&gt;对于智能指针，这里只是有一些简单的介绍，后面还将深入研究。&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&quot;http://www.cnblogs.com/Solstice/archive/2011/08/16/2141515.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Solstice/archive/2011/08/16/2141515.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;值语义和对象语义&quot;&gt;&lt;a href=&quot;#值语义和对象语义&quot; class=&quot;headerlink&quot; title=&quot;值语义和对象语义&quot;&gt;&lt;/a&gt;值语义和对象语义&lt;/h3&gt;&lt;p&gt;值语义(value sematics)指的是对象的拷贝与原对象无关，拷贝之后就与原对象脱离关系。C++的内置类型都是值语义，如bool/int/double等，标准库里的pair&amp;lt;&amp;gt;,vector&amp;lt;&amp;gt;,map&amp;lt;&amp;gt;，string等类型也都是值语义。Java语言的primitive types(原生数据类型)也是值语义。&lt;br&gt;与值语义(object sematics)对应的是”对象语义”，或者也叫做”引用语义”。对象语义指的是面向对象意义下的对象，对象是禁止拷贝的或拷贝后与原来的对象存在关联。比如，拷贝一个Employee对象是没有意义的，一个雇员不会变成两个雇员。同样，muduo库中的TcpConnection，显然也是不可复制的，因为牵涉到系统的资源。Java里面的class对象都是对象语义/引用语义。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.dujiong.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>muduo源码阅读之Channel与Poller</title>
    <link href="http://blog.dujiong.net/2016/05/06/muduo-4/"/>
    <id>http://blog.dujiong.net/2016/05/06/muduo-4/</id>
    <published>2016-05-06T10:39:19.000Z</published>
    <updated>2016-07-21T12:50:06.928Z</updated>
    
    <content type="html">&lt;p&gt;如前所述，Reactor模式包括四个部分的组件:Handle, Synchronous Event Demultiplexer，Initiation Dispatcher和Event Handler。上一篇已经学习了muduo中的Initiation Dispatcher—EventLoop类，接下来分别讲述Handle—Channel类和Synchronous Event Demultiplexer—Poller类。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;           &lt;/p&gt;
&lt;h3 id=&quot;Channel&quot;&gt;&lt;a href=&quot;#Channel&quot; class=&quot;headerlink&quot; title=&quot;Channel&quot;&gt;&lt;/a&gt;Channel&lt;/h3&gt;&lt;p&gt;Channel类的功能类似于JAVA NIO的SelectableChannel和SelectionKey的组合。每个Channel对象自始至终只属于一个EventLoop，而根据muduo采用的one loop per thread模型，每个Channel对象都只属于某一个IO线程。每个Channel对象只负责一个文件描述符(fd)的IO事件分发，但它不拥有这个fd，也不会在析构的时候关闭这个fd。&lt;br&gt;Channel在Event Handler与Dispatcher之间起到中介的作用。一方面可与Event Handler交互，Event Hanlder设置Channel的：    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与I/O相关的文件描述符，即成员变量fd_；     &lt;/li&gt;
&lt;li&gt;在当前Channel上感兴趣的事件(events_)，在Event Handler中通过调用Channel的enableReading()、enableWriting()函数设置；   &lt;/li&gt;
&lt;li&gt;处理各种类型事件的回调函数，相应成员变量包括readCallback_、writeCallback_、errorCallback_等，在Event Handler中通过调用Channel的接口函数setXXXCallback()等完成。&lt;br&gt;相应的代码如下(部分)。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;class Channel : boost::noncopyable
{
    public:
        ...
        void handleEvent();
        void setReadCallback(const EventCallback&amp;amp; cb)
        { readCallback_ = cb; }
        ...
        void enableReading() 
        { events_ |= kReadEvent; update(); }
        ...
        int index() { return index_; }
        EventLoop* ownerLoop() { return loop_; }

    private:    
        void update();
        static const int kReadEvent;
        ...
        EventLoop* loop_;
        int fd_;
        int events_;
        int revents_;
        int index_;
        EventCallback readCallback_;
        ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另一方面，EventLoop与Channel通信，包括以下内容:      &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Channel包含EventLoop类型的成员变量loop_，Channel在成员函数update()函数中调用loop_的成员函数updateChannel()，后者转而调用Poller::updateChannel()。   &lt;/li&gt;
&lt;li&gt;通知在当前Channel中就绪的事件。EventLoop通过Demultiplexer得到就绪Channel中发生的事件，并将其保存在成员变量revents_中。    &lt;/li&gt;
&lt;li&gt;Channel事件处理函数handleEvent()的调用。Channel::handleEvent()是Channel的核心，由EventLoop::loop()调用，Channel根据revents_的值调用Event Handler传入的相应回调函数。&lt;br&gt;所以，Channel是Event Handler与Dispatcher之间的桥梁，二者不直接通信，而是分别与Channel交互。&lt;br&gt;Channel::handleEvent()会调用Channel::handleEventWithGuard()，后者完成具体的事件处理过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;void Channel::handleEventWithGuard(Timestamp receiveTime)
{
    ...
    if((revents_ &amp;amp; POLLHUP) &amp;amp;&amp;amp; !(revents_ &amp;amp; POLLIN))
    {
        if(closeCallback_) closeCallback_();
    }
    if(revents_ &amp;amp; (POLLIN | POLLPRI | POLLRDHUP))
    {
        if(readCallback_) readCallback_();
    }
    if(revents_ &amp;amp; POLLOUT)
    {
        if(writeCallback_) writeCallback_();
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数中的POLLIN，POLLNVAL，POLLERR都是poll函数的测试条件，handleEventWithGuard()根据这些测试条件调用相应的回调函数。&lt;br&gt;最后来看一下对感兴趣事件的设置，具体来说，设置当前Channel是否关系读、写事件的发生。通过update()函数或者将Channel插入Demultiplexer，或者更新Demultiplexer中相应Channel的状态。     &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int Channel::kNoneEvent = 0;
const int Channel::kReadEvent = POLLIN | POLLPRI;
const int Chennel::kWriteEvent = POLLOUT;
void enableReading() { events_ |= kReadEvent; update(); }
...
void diableAll() { events_ |= kNoneEvent; update(); }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Poller&quot;&gt;&lt;a href=&quot;#Poller&quot; class=&quot;headerlink&quot; title=&quot;Poller&quot;&gt;&lt;/a&gt;Poller&lt;/h3&gt;&lt;p&gt;Poller类是IO多路复用的封装，在muduo中是个抽象基类，因为muduo同时支持poll()和epoll()两种IO复用机制，是muduo中少有的使用到继承的模块。Poller是EventLoop的间接成员，只供其owner EventLoop在IO线程调用，其生命期与EventLoop相等。Poller并不拥有Channel，Channel在析构之前必须自己unregister(EventLoop::removeChannel()),避免空悬指针。&lt;br&gt;Poller接口很简单，主要包括三个成员函数：      &lt;/p&gt;
&lt;p&gt; &lt;code&gt;1. virtual Timestamp poll(int timeoutMs, ChannelList* activeChannels) = 0；&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;poll()是Poller的核心功能，调用poll(), epoll()获得当前活动的IO事件，然后填充调用方传入的activeChannes，并返回poll()返回的时刻。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Timestamp EPollPoller::poll(int timeoutMs, ChannelList* activeChannels)
{
    int numEvents = ::epoll_wait(epollfd_,
                           &amp;amp;*events_.begin(),
                           static_cast&amp;lt;int&amp;gt;(events_.size()),
                           timeoutMs);
    ...
    if(numEvents&amp;gt;0)
    {
        fillActiveChannels(numEvents, activeChannels);
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以epoll()实现为例，fillActiveChannels()遍历找出有活动事件的fd_，把其对应的Channel填入activeChannels。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;2. virtual void updateChannel(Channel* channel) = 0；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Poller::updateChannel()的主要功能是负责维护和更新pollfds_数组(以poll()实现为例)。添加新Channel的复杂度是O(logN)，原因是channels&lt;em&gt;对应的数据结构： &lt;code&gt;typedef std::map&amp;lt;int,Channel*&amp;gt; ChannelMap;&lt;/code&gt;，更新已有的Channel的复杂度是O(1)，因为Channel记住了自己在pollfds\&lt;/em&gt;数组中的下标，可以快速定位。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;3. virtual void removeChannel(Channel* channel) = 0；&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Channel的删除。同样，需要更改pollfds_、channels_数据成员。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;至此，Reactor模式中最核心的事件分发机制中的关键结构已讲述完毕，对应muduo中的EventLoop，Channel，Poller三个class。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如前所述，Reactor模式包括四个部分的组件:Handle, Synchronous Event Demultiplexer，Initiation Dispatcher和Event Handler。上一篇已经学习了muduo中的Initiation Dispatcher—EventLoop类，接下来分别讲述Handle—Channel类和Synchronous Event Demultiplexer—Poller类。&lt;br&gt;
    
    </summary>
    
    
      <category term="muduo" scheme="http://blog.dujiong.net/tags/muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo源码阅读之EventLoop类</title>
    <link href="http://blog.dujiong.net/2016/05/03/muduo-3/"/>
    <id>http://blog.dujiong.net/2016/05/03/muduo-3/</id>
    <published>2016-05-03T13:13:47.000Z</published>
    <updated>2016-07-16T07:38:55.800Z</updated>
    
    <content type="html">&lt;p&gt;EventLoop类似于前面所述的Reactor模式中的Initiation Dispatcher，是用于驱动的主模块，完成与其他模块的调用和交互。EventLoop类提供的主要是一个框架，事件的分发由Demultiplexer提供，事件的处理由Event Handler提供，但事件的循环、怎样将事件的分发与调用结合起来则是由EventLoop类决定的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&quot;EventLoop继承自boost-noncopyale&quot;&gt;&lt;a href=&quot;#EventLoop继承自boost-noncopyale&quot; class=&quot;headerlink&quot; title=&quot;EventLoop继承自boost::noncopyale&quot;&gt;&lt;/a&gt;EventLoop继承自boost::noncopyale&lt;/h3&gt;&lt;p&gt;EventLoop是不可拷贝的，所以源码中继承了boost::noncopyable。boost::noncopyable的思想是把构造函数和析构函数设置成protected权限，这样子类可以调用，但是外面的类不能调用，那么当子类需要定义构造函数的时候不至于通不过编译。但是更关键的是noncopyable把复制构造函数和复制赋值函数都做成了private，这就意味着除非子类定义自己的复制构造和赋值函数，否则在子类没有定义的情况下，外面的调用者是不能够通过复制构造和赋值等手段来产生一个新的子类对象的。&lt;br&gt;one loop per thread模型意味着每个线程只能有一个EventLoop对象，因此EventLoop的构造函数会检查当前线程是否已经创建了其他EventLoop对象。EventLoop的构造函数会记住本对象所属的线程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EventLoop::EventLoop()    
    :looping(false),
     threadId_(CurrentThread::tid())
     ...
{
    if(t_loopInthisThread)
        LOG_FATAL &amp;lt;&amp;lt; ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Event-Hander的注册与删除&quot;&gt;&lt;a href=&quot;#Event-Hander的注册与删除&quot; class=&quot;headerlink&quot; title=&quot;Event Hander的注册与删除&quot;&gt;&lt;/a&gt;Event Hander的注册与删除&lt;/h3&gt;&lt;p&gt;在初始状态，一个EventLoop只是一个框架，其中并没有包含具体需要处理的事件及相应的资源。所以，要处理一个事件，必须要将相应的Handler信息注册到EventLoop中，muduo中，这个用于注册的函数就是EventLoop::updateChannel()。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void EventLoop::updateChannel(Channel* channel)
{
    assert(channel_-&amp;gt;ownerLoop() == this);
    asserInLoopThread();
    poller_-&amp;gt;updateChannel(channel);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数形参为Channel*类型，如前所述，Channel类似Reactor模式中的Handle。通过Channel类型的变量，Event Handler的相关信息被注册到了EventLoop中。具体的注册过程由形参为poller_成员变量完成，这是muduo的多路复用机制。Poller在muduo中是个抽象基类，因为muduo同时支持poll()和epoll()两种IO复用机制。Poller::updateChannel()的主要功能就是负责维护和更新pollfds数组。                                                                                                                                &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void EventLoop::removeChannel(Channel* channel)
{
    ...
    poller_-&amp;gt;removeChannel(channel);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样，Event Handler的删除与注册很相似，具体过程也通过poller_完成。&lt;/p&gt;
&lt;h3 id=&quot;事件循环中的事件分发&quot;&gt;&lt;a href=&quot;#事件循环中的事件分发&quot; class=&quot;headerlink&quot; title=&quot;事件循环中的事件分发&quot;&gt;&lt;/a&gt;事件循环中的事件分发&lt;/h3&gt;&lt;p&gt;loop函数是EventLoop类的核心，用于事件循环的运行。在循环返回时，通过Demultiplexer获得已注册到EventLoop中Event Handler的就绪通知。然后Demultiplexer将所有就绪的事件Channel保存到容器activeChannels_中，接着一一处理其中所有activeChannel的callback。EventLoop只提供框架，对要处理的事件一无所知，Channel中包含感兴趣的事件和对事件的处理方法(注册的回调函数)。    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void EventLoop::loop()
{
    while(!quit)
    {
        pollReturnTime=poller_-&amp;gt;poll(kPollTimeMs, &amp;amp;activeChannels_);
        for(ChannelList::iterator it=activeChannels_.begin();
                it!=activeChannels_.end();++it)
        {
            currentActiveChannel_ = *it;
            currentActiveChannel_-&amp;gt;handleEvent(pollReturnTime_);
        }
        doPendingFunctors();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;EventLoop在它的IO线程里执行某个用户任务回调，即EventLoop::runInLoop(const Functor&amp;amp; cb),如果用户在当前IO线程调用这个函数，回调会同步进行，如果用户在其他线程调用runInLoop()，cb会被加入队列(queueInLoop(std::move(cb)))，IO线程会被唤醒来调用Functor。唤醒IO线程传统的方法是用pipe()，IO线程始终监视此管道的readable事件，在需要唤醒的时候，其他线程往管道里写一个字节，这样IO线程就从IO复用阻塞调用中返回。而muudo中使用了Linux新增的eventfd，可以更高效的唤醒。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void EventLoop::runInLoop(Functor&amp;amp;&amp;amp; cb)
{
    if(isInLoopThread())
    {
        cb();
    }
    else
    {
        queueInLoop(std::move(cb));
    }
}
void EventLoop::queueInLoop(Functor&amp;amp;&amp;amp; cb)
{
    {
        MutexLockGuard lock(mutex_);
        pendingFunctors_.push_back(std::move(cb));
    }
    if(!isInLoopThread() || callingPendingFunctors_)
    {
        wakeup();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;几个定时运行函数&quot;&gt;&lt;a href=&quot;#几个定时运行函数&quot; class=&quot;headerlink&quot; title=&quot;几个定时运行函数&quot;&gt;&lt;/a&gt;几个定时运行函数&lt;/h3&gt;&lt;p&gt;muduo EventLoop中有三个定时函数。runAt(…)指在指定的时间调用TimerCallback, runAfter(…)指等一段时间调用TimerCallback, runEvery(…)指以固定时间间隔反复调用TimerCallbck。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TimerId EventLoop::runAt(const Timestamp&amp;amp; time, const TimerCallback&amp;amp; cb)
{
      return timerQueue_-&amp;gt;addTimer(cb, time, 0.0);
}

TimerId EventLoop::runAfter(double delay, const TimerCallback&amp;amp; cb)
{
       Timestamp time(addTime(Timestamp::now(), delay));
       return runAt(time, cb);
}

TimerId EventLoop::runEvery(double interval, const TimerCallback&amp;amp; cb)
{
       Timestamp time(addTime(Timestamp::now(), interval));
       return timerQueue_-&amp;gt;addTimer(cb, time, interval);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;muduo中的TimerQueue的公有接口很简单，只有两个函数addTimer()和cancel()，TimerQueue使用二叉搜索树，以pair&lt;timestamp,timer*&gt;为key(即使两个Timer到期时间相同，地址也必定不同)，能快速根据当前时间找到已到期的定时器，也要高效的添加和删除Timer。TimerQueue关注最早的定时器，getExpired返回所有的超时定时器列表，使用stl算法lower_bound()返回第一个值&amp;gt;=超时定时器的迭代器。&lt;/timestamp,timer*&gt;&lt;/p&gt;
&lt;h3 id=&quot;在事件循环中运行回调函数&quot;&gt;&lt;a href=&quot;#在事件循环中运行回调函数&quot; class=&quot;headerlink&quot; title=&quot;在事件循环中运行回调函数&quot;&gt;&lt;/a&gt;在事件循环中运行回调函数&lt;/h3&gt;&lt;p&gt;前面已经叙述过，EventLoop::runInLoop()用于在一个事件循环中运行回调函数。如果事件循环在当前线程中，那么可以直接运行回调函数。但如果不在当前线程，那么将回调函数放入待完成事件集合中，在loop()函数中的doPendingFunctors()完成处理。在上文中可以看到loop函数的每次while()循环在最后都会运行doPendingFunctors()。&lt;br&gt;pendingFunctors保存了待完成的事件，doPendingFunctors()函数很简单，就是顺序调用pendingFunctors各个回调函数。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;EventLoop类似于前面所述的Reactor模式中的Initiation Dispatcher，是用于驱动的主模块，完成与其他模块的调用和交互。EventLoop类提供的主要是一个框架，事件的分发由Demultiplexer提供，事件的处理由Event Handler提供，但事件的循环、怎样将事件的分发与调用结合起来则是由EventLoop类决定的。&lt;br&gt;
    
    </summary>
    
    
      <category term="muduo" scheme="http://blog.dujiong.net/tags/muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo源码阅读之muduo的回调函数机制</title>
    <link href="http://blog.dujiong.net/2016/04/28/muduo-2/"/>
    <id>http://blog.dujiong.net/2016/04/28/muduo-2/</id>
    <published>2016-04-28T11:18:24.000Z</published>
    <updated>2016-06-28T13:55:56.861Z</updated>
    
    <content type="html">&lt;p&gt;回调是指将一段可执行的代码作为变量传给另外一部分代码，以供同步或异步调用。在Reactor模式中，在事件到来时调用相应的处理函数就是一种异步回调的过程。回调函数的实现可以由各种各样的方式。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;C语言的函数指针&quot;&gt;&lt;a href=&quot;#C语言的函数指针&quot; class=&quot;headerlink&quot; title=&quot;C语言的函数指针&quot;&gt;&lt;/a&gt;C语言的函数指针&lt;/h3&gt;&lt;p&gt;最熟悉的回调机制应该属于C语言的函数指针了。考虑一个简单的例子，实现对两个数的操作，这个操作可以是加减乘除等。&lt;br&gt;首先声明一个函数指针：           &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typedef int (operFunc*)(int a, int b);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个类型的函数指针可以做为参数传给用于实现两个数操作的函数，这个函数仅仅是简单的调用传入的函数指针：                                                                                  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int operation(int a, int b, operFunc func)
{
    return func(a,b);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在可以定义各种回调函数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int add(int a, int b) 
{
    return a + b;
}
int minus(int a, int b) 
{   
    return a - b;
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，在调用operation()时可以根据传入回调函数的不同，实现不同的功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int main()
{
    int a = 4;
    int b = 2;
    std::cout &amp;lt;&amp;lt; operation(a,b,add) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; operation(a,b,minus);
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;传统C-的回调&quot;&gt;&lt;a href=&quot;#传统C-的回调&quot; class=&quot;headerlink&quot; title=&quot;传统C++的回调&quot;&gt;&lt;/a&gt;传统C++的回调&lt;/h3&gt;&lt;p&gt;在传统的C++程序中，事件回调是通过虚函数进行的。网络库往往会定义一个或几个抽象基类，其中声明一些(纯)虚函数，使用者需要继承这些基类，并覆写这些虚函数，以获得事件回调通知。由于C++的动态绑定只能通过指针和引用实现，使用者必须把派生类（myHandler）对象的指针或引用隐士转换为基类(Handler)的指针或引用。网络库调用积累的虚函数，通过动态绑定机制实际调用的是用户在派生类中覆写的虚函数。&lt;br&gt;下面通过一段代码示例看看虚函数如何实现回调。   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
class Handler    //interface
{
    public:
        virtual void say(const char* text) = 0;
};

class MyHandler : public Handler
{
    public:
        void say(const char* text)
        {
            printf(&amp;quot;hello,%s&amp;quot;,text);
        }    
};

int main()
{
    Handler *handler;
    MyHandler myHandler;
    handler = dynamic_cast&amp;lt;Hander*&amp;gt;(myHandler);
    handler.say(&amp;quot;world&amp;quot;);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;muduo采用的事件回调&quot;&gt;&lt;a href=&quot;#muduo采用的事件回调&quot; class=&quot;headerlink&quot; title=&quot;muduo采用的事件回调&quot;&gt;&lt;/a&gt;muduo采用的事件回调&lt;/h3&gt;&lt;p&gt;muduo使用的是boost库的boost::function和boost::bind实现函数回调。现在，已经可以在c++11中使用它们。&lt;br&gt;boost::function类似于函数指针的封装，boost::function类型的变量可以保存一个可以调用的函数指针。可以指向任何函数，包括成员函数。所以boost::function与boost::bind结合起来使用可以实现一些函数指针无法完成的功能，比如，绑定特定变量到函数上，实现某些函数式编程语言的功能，甚至是真正的闭包。&lt;br&gt;以下的例子均使用c++11。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;functional&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;

namespace
{
    void function(int number, float floation, std::string string)
    {
        std::cout &amp;lt;&amp;lt; &amp;quot;Int: \&amp;quot;&amp;quot; &amp;lt;&amp;lt; number &amp;lt;&amp;lt; &amp;quot;\&amp;quot; Float: \&amp;quot;&amp;quot; &amp;lt;&amp;lt; floatation
                  &amp;lt;&amp;lt; &amp;quot;\&amp;quot; String: \&amp;quot;&amp;quot; &amp;lt;&amp;lt; string &amp;lt;&amp;lt; &amp;quot;\&amp;quot;&amp;quot; &amp;lt;&amp;lt; std::endl; 
    }
}

int main()
{
    //declare function pointer variables 
    std::function&amp;lt;void(std::string, float, int)&amp;gt; shuffleFunction;
    std::function&amp;lt;void(void)&amp;gt; voidFunction;
    std::function&amp;lt;void(float)&amp;gt; reduceFunction;

    //bind the method
    shuffleFunction = std::bind(::function,_3,_2,_1);
    voidFunction = std::bind(::function, 5,5.f, &amp;quot;five&amp;quot;);
    reduceFunction = std::bind(::function, 13, _1, &amp;quot;empty&amp;quot;);

    //call
    shuffleFunction(&amp;quot;String&amp;quot;,0.f,0);
    voidFunction();
    reduceFunction(13.f);

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;传统的指向成员函数的回调函数用法如下例。    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class A
{
    public:
        int add(int a, int b)
        {
            std::cout &amp;lt;&amp;lt; &amp;quot;A::add()&amp;quot; &amp;lt;&amp;lt; endl
            return a + b;
        }
}；
typedef int (A::*operFunc)(int, int);
int main(void)
{
    operFunc oper = &amp;amp;A::add;
    A ca;
    int a = 2;
    int b = 3;
    int res = (ca.*oper)(a, b);
    std::cout &amp;lt;&amp;lt; res &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成员函数具有隐含的this指针，在调用成员函数时必须通过类的实例。所以成员函数指针变量不仅在定义时有特殊的语法，更重要的是在实际调用回调函数必须采用(a.*oper)(a,b)这样的形式。这样的语法比较复杂，由于与非成员函数的声明不同，无法传入同一个函数。所以，需要调用函数既能接收成员函数又能接收非成员函数。&lt;br&gt;这就是在muduo库中广泛应用的function和bind的机制，如下示例代码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class A
{
    ...
}；
typedef std::function&amp;lt;int(int,int)&amp;gt; operFunc;
int main()
{
    int a = 2;
    int b = 4;
    operFunc oper;
    A ca;
    oper = std::bind(&amp;amp;A::add, &amp;amp;ca, _1, _2);
    std::out &amp;lt;&amp;lt; operation(a,b,oper) &amp;lt;&amp;lt; std::endl;
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;muduo使用function和bind实现了闭包的功能，即，函数+引用环境，或者说是附有数据的行为，因为，在事件到来时调用回调函数处理，通常还需要知道其他的一些信息，比如在网络程序中，可能是连接当前的状态等。&lt;br&gt;在muduo中，一个回调函数通常是一个类的成员函数，所以这个回调函数同时也保存了某个类实例的信息，包括这个类的成员变量、成员函数等，在实际调用函数的时候就可以使用这些信息和状态，这样的处理当时让程序的编写显得非常清晰和方便。    &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;回调是指将一段可执行的代码作为变量传给另外一部分代码，以供同步或异步调用。在Reactor模式中，在事件到来时调用相应的处理函数就是一种异步回调的过程。回调函数的实现可以由各种各样的方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="muduo" scheme="http://blog.dujiong.net/tags/muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo源码阅读之Reactor模式和muduo</title>
    <link href="http://blog.dujiong.net/2016/04/25/muduo-1/"/>
    <id>http://blog.dujiong.net/2016/04/25/muduo-1/</id>
    <published>2016-04-25T10:56:03.000Z</published>
    <updated>2016-06-28T12:17:55.078Z</updated>
    
    <content type="html">&lt;p&gt;muduo是一个基于Reactor模式的非阻塞网络库，常见的使用Reactor模式的网络库（框架）还有libevent,Java Netty等，所以，首先需要弄清楚Reactor模式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Reactor的事件处理机制&quot;&gt;&lt;a href=&quot;#Reactor的事件处理机制&quot; class=&quot;headerlink&quot; title=&quot;Reactor的事件处理机制&quot;&gt;&lt;/a&gt;Reactor的事件处理机制&lt;/h3&gt;&lt;p&gt;首先回忆一下普通函数调用的机制：程序调用某函数执行，程序等待，函数将结果和控制权返回给程序，程序继续处理。这是一种顺序的处理方式。&lt;br&gt;Reactor常释义“反应堆”，是一种事件驱动机制，和普通函数调用的不同之处在于：应用程度不是主动的调用某个接口API完成处理，恰恰相反，Reactor逆置了事件处理流程，应用程序需要提供相应的接口并注册到Reactor上，如果关注的事件发生，Reactor将主动调用应用程序注册的接口，这些接口有一个熟悉的名字：“回调函数”。所以，用户使用Reactor模式的网络库向其注册相应的事件和回调函数，当事件发生时，就会调用回调函数处理事件（I/O读写，定时器和信号等）。Reactor模式一般与非阻塞I/O结合，在处理一个事件时不用等待事件的完成，而是转去处理其他的任务，当事件处理完毕后再去通知Reactor。&lt;br&gt;所以，Reactor模式具有很多优点：&lt;br&gt;1）响应快，不必为单个同步时间所阻塞，虽然Reactor本身依然是同步的；&lt;br&gt;2）编程相对简单，可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销；&lt;br&gt;3）可扩展性，可以方便的通过增加Reactor实例个数来充分利用CPU资源；&lt;br&gt;4）可复用性，Reactor框架本身与具体事件处理逻辑无关，具有很高的复用性；&lt;/p&gt;
&lt;h3 id=&quot;Reactor模式的结构&quot;&gt;&lt;a href=&quot;#Reactor模式的结构&quot; class=&quot;headerlink&quot; title=&quot;Reactor模式的结构&quot;&gt;&lt;/a&gt;Reactor模式的结构&lt;/h3&gt;&lt;p&gt;Reactor模式包括四个部分的组件:&lt;br&gt;1）事件源（Handle）&lt;br&gt;用于表示通过操作系统管理的各种资源，包括套接字，打开文件，定时器等，在Unix系统中是文件描述符，在Windows系统中是句柄。当关心的事件在其上面发生时，可以通过多路复用器(select/epoll等)得到。&lt;br&gt;2）Synchronous Event Demultiplexer&lt;br&gt;事件多路分发机制。由操作系统提供的I/O多路复用机制，如select/epoll等。程序首先将关心的事件源注册到event demultiplexer上，当有事件到达时，event demultiplexer会发出通知“在已经注册的句柄集中，一个或多个句柄已经就绪”。&lt;br&gt;3）Initiation Dispatcher&lt;br&gt;事件管理的接口，实现事件的注册，删除，分发的接口，并运行事件循环，是用于驱动的主模块。Synchronous Event Demultiplexer也是它的一个组件，用于等待新事件的发生。当有事件发生时，Demultiplexer通知dispatcher，dispatcher再根据事件的类型使用相应的Event Hander完成事件的处理。&lt;br&gt;3）Event Handler&lt;br&gt;事件处理程序。一般来说会根据事件类型的不同实现各种类型的回调函数。&lt;/p&gt;
&lt;p&gt;下图可详细表达各个模块和它们之间的关系：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/052r16x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;muduo中的Reactor模式&quot;&gt;&lt;a href=&quot;#muduo中的Reactor模式&quot; class=&quot;headerlink&quot; title=&quot;muduo中的Reactor模式&quot;&gt;&lt;/a&gt;muduo中的Reactor模式&lt;/h3&gt;&lt;p&gt;Reactor模式的各个组件在muduo中都有对应的部分，虽然在具体的实现和逻辑上有其自身的特点和不同，但其内在的组织结构是高度符合Reactor模式的。&lt;br&gt;muduo的类图如下：                                                                                    &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/M4uVBf1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;各个模块与Reactor模式各组件的对应关系（功能上）是    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialization dispatcher —— EventLoop    &lt;/li&gt;
&lt;li&gt;Synchronous Event Demultiplexer —— Poller     &lt;/li&gt;
&lt;li&gt;Handles —— FileDescriptor、Channel    &lt;/li&gt;
&lt;li&gt;Event Handler —— TcpConnection、Acceptor、Connector&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;muduo中的思想&quot;&gt;&lt;a href=&quot;#muduo中的思想&quot; class=&quot;headerlink&quot; title=&quot;muduo中的思想&quot;&gt;&lt;/a&gt;muduo中的思想&lt;/h3&gt;&lt;p&gt;有一个main Reactor，这个main Reactor只管接收新的连接，一旦创建好连接，就从EventLoopThreadPool（线程池）中选择一个合适的EventLoop来托管这个连接套接字。这个EventLoop就是一个sub Reactor。&lt;br&gt;muduo的线程模型是one loop per thread + thread pool模型。每个线程最多有一个EventLoop，每个TcpConnection必须归某个EventLoop管理，所有的I/O会转移到这个线程。即，一个句柄只能由一个线程读写。&lt;br&gt;TcpServer直接支持支持多线程，有两种模式：&lt;br&gt;1）单线程，accept()与TcpConnection用同一个线程做IO；&lt;br&gt;2）多线程，accept()与EventLoop在同一个线程，另外创建一个EventLoopThreadPool，新的连接会分配到线程池中。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;muduo是一个基于Reactor模式的非阻塞网络库，常见的使用Reactor模式的网络库（框架）还有libevent,Java Netty等，所以，首先需要弄清楚Reactor模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="muduo" scheme="http://blog.dujiong.net/tags/muduo/"/>
    
  </entry>
  
  <entry>
    <title>wifi关键指标提取</title>
    <link href="http://blog.dujiong.net/2016/04/20/wifi-data-get/"/>
    <id>http://blog.dujiong.net/2016/04/20/wifi-data-get/</id>
    <published>2016-04-20T01:56:09.000Z</published>
    <updated>2016-07-21T08:44:02.200Z</updated>
    
    <content type="html">&lt;p&gt;本文介绍并实现无线网卡获取周围wifi关键通信数据，捕捉所需要的MAC层管理数据包，通过解包获取到周围AP和终端设备的MAC地址和RSSI，并存入数据库中，可用于定位，通信链路分析等。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;###基本方法&lt;br&gt;在实现MAC地址和RSSI的提取时，借鉴了OpenWRT现有的iwcap工具包，iwcap是OpenWRT上用来调试wifi功能的一个抓包工具，可以抓取监听到的所有802.11帧，并获取到pcap格式的网卡原始数据。&lt;/p&gt;
&lt;p&gt;###程序分析&lt;br&gt;详细程序见: &lt;a href=&quot;https://github.com/jiongdu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍并实现无线网卡获取周围wifi关键通信数据，捕捉所需要的MAC层管理数据包，通过解包获取到周围AP和终端设备的MAC地址和RSSI，并存入数据库中，可用于定位，通信链路分析等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openwrt/wifi" scheme="http://blog.dujiong.net/tags/openwrt-wifi/"/>
    
  </entry>
  
  <entry>
    <title>C++内存管理--部分总结</title>
    <link href="http://blog.dujiong.net/2016/04/13/cplusplusMem/"/>
    <id>http://blog.dujiong.net/2016/04/13/cplusplusMem/</id>
    <published>2016-04-13T11:11:16.000Z</published>
    <updated>2016-07-05T12:56:02.581Z</updated>
    
    <content type="html">&lt;p&gt;可以说，内存管理是c/c++程序员面临的最重要的问题之一，同时很多时候也是最麻烦的事情。所以，这里对简单层次的内存管理做下总结和说明，同时，例举了一些常见的内存错误及解决策略。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;野指针&quot;&gt;&lt;a href=&quot;#野指针&quot; class=&quot;headerlink&quot; title=&quot;野指针&quot;&gt;&lt;/a&gt;野指针&lt;/h3&gt;&lt;p&gt;在c/c++内存问题中经常听到野指针这个词语，那么到底什么事野指针？野指针是怎样形成的？&lt;br&gt;首先，野指针不是NULL指针，而是指向”垃圾”内存的指针。NULL指针用if语句很容易判断，但是野指针很危险，if语句对其不起作用。&lt;br&gt;野指针的成因主要有下列几种：&lt;br&gt;(1) 指针变量没有初始化。 任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。&lt;br&gt;(2) 指针被free()或者delete之后，没有置为NULL，让人误以为其是个合法的指针。  这点是实际运用过程中极易犯错误的。&lt;br&gt;(3) 指针操作超越了变量的作用范围。&lt;/p&gt;
&lt;h3 id=&quot;new-delete和malloc-free&quot;&gt;&lt;a href=&quot;#new-delete和malloc-free&quot; class=&quot;headerlink&quot; title=&quot;new/delete和malloc()/free()&quot;&gt;&lt;/a&gt;new/delete和malloc()/free()&lt;/h3&gt;&lt;p&gt;c/c++程序员想必不会陌生。注意它们的区别和联系。&lt;br&gt;(1) new/delete是c++的操作符,而malloc()/free()是c/c++的一个函数。&lt;br&gt;(2) new不只是内存分配，在内存分配后，还会调用类的构造函数，同样，delete会调用类的析构函数。而malloc()只分配内存，不初始化成员，free也不会调用析构函数。所以，new可以认为是malloc()加构造函数的执行。&lt;br&gt;(3) 因为new会调用类的构造函数，所以new出来的指针式直接带类型信息的，而malloc()返回的都是void指针。&lt;br&gt;(4) 同样的原因，对于非内部数据类型的对象而言，只用malloc()/free()无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，在消亡之前要自动执行析构函数。由于malloc()/free()是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc()/free()。而由于内部数据类型的“对象”没有构造与析构的过程，对它们而言malloc()/free()和new/delete是等价的。&lt;br&gt;(5) 如果用free()释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。同样，用delete释放”malloc()申请的动态内存”。理论上讲程序不会出错，但是该程序的可读性很差。所以，new/delete必须配对使用，malloc()/free()也一样。&lt;/p&gt;
&lt;p&gt;一些易错点：&lt;br&gt;(1) malloc()函数本身并不识别要申请的内存是什么类型，而只关心内存的总字节数。malloc()返回值的类型是void&lt;em&gt;,&lt;/em&gt;所以在调用malloc()时要显示地进行类型转换，将void*转换成所需要的指针类型。&lt;br&gt;(2) 语句free(p)之所以能正确地释放内存.是因为指针p的类型以及它所指的内存的容量事先都是知道的。如果p是NULL指针，那么free对p无论操作多少次都不会出问题。如果p不是NULL指针，那么free对p连续操作两次就会导致程序运行错误。&lt;br&gt;(3) 运算符new使用起来要比函数malloc简单得多，这是因为new内置了sizeof、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，new在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么new的语句也可以有多种形式。而如果用new创建对象数组，那么只能使用对象的无参数构造函数。          &lt;/p&gt;
&lt;h3 id=&quot;常见的内存错误及策略&quot;&gt;&lt;a href=&quot;#常见的内存错误及策略&quot; class=&quot;headerlink&quot; title=&quot;常见的内存错误及策略&quot;&gt;&lt;/a&gt;常见的内存错误及策略&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;(1) 内存分配未成功，却使用了它&lt;/strong&gt;&lt;br&gt;编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为NULL。如果指针p是函数的参数，那么在函数的入口处用assert(p!=NULL)进行检查。如果是用malloc()或new()来申请内存，应该用if(p==NULL) 或if(p!=NULL)进行防错处理。&lt;br&gt;(2) 内存分配虽然成功，但是尚未初始化就引用它&lt;br&gt;犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。&lt;br&gt;内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。&lt;br&gt;&lt;strong&gt;(3) 内存分配成功并且已经初始化，但操作越过了内存的边界&lt;/strong&gt;&lt;br&gt;例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在for循环语句中，循环次数很容易搞错，导致数组操作越界。&lt;br&gt;&lt;strong&gt;(4) 忘记了释放内存，造成内存泄露&lt;/strong&gt;&lt;br&gt; 含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。&lt;br&gt;&lt;strong&gt;(5) 释放了内存却继续使用它（常见有三种情况）&lt;/strong&gt;&lt;br&gt;a. 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。&lt;br&gt;b. 函数的return语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。&lt;br&gt;c. 使用free或delete释放了内存后，没有将指针设置为NULL。导致产生“野指针”。&lt;/p&gt;
&lt;p&gt;以上是对常见的一些内存问题的解决策略的总结。错误率特别高的部分已经用黑体标出，需注意。&lt;/p&gt;
&lt;h3 id=&quot;指针和数组的对比&quot;&gt;&lt;a href=&quot;#指针和数组的对比&quot; class=&quot;headerlink&quot; title=&quot;指针和数组的对比&quot;&gt;&lt;/a&gt;指针和数组的对比&lt;/h3&gt;&lt;p&gt;指针和数组应该是c/c++程序员在编程过程中常打交道的类型了。而且二者在不少地方还可以相互替换着用，但是，请注意，二者有很大的区别。下面对c/c++指针和数组使用中注意项和易错项做下总结。(下述中p是指指针，a、b指数组)&lt;br&gt;(1) 数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。&lt;br&gt;(2) 若想把数组a的内容复制给数组b，不能用语句 b = a ，应该用标准库函数strcpy()进行复制。&lt;br&gt;(3) 比较数组b和a的内容是否相同，不能用if(b==a) 来判断，应该用标准库函数strcmp进行比较。&lt;br&gt;(4) 语句p = a 不是把a的内容复制指针p，而是把a的地址赋给了p。可以先用库函数malloc()为p申请一块容量为strlen(a)+1个字符的内存，再用strcpy()进行字符串复制。&lt;br&gt;(5) 语句if(p==a) 比较的不是内容而是地址，应该用库函数strcmp()来比较。&lt;br&gt;(6) 用运算符sizeof可以计算出数组的容量（字节数）（注意别忘了’\0’）。&lt;br&gt;(7) c/c++没有办法知道指针所指的内存容量，除非在申请内存时记住它。&lt;br&gt;(8) 当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。(即在函数内的用数组名的本质上是相应的指针)&lt;/p&gt;
&lt;h3 id=&quot;指针函数的传递&quot;&gt;&lt;a href=&quot;#指针函数的传递&quot; class=&quot;headerlink&quot; title=&quot;指针函数的传递&quot;&gt;&lt;/a&gt;指针函数的传递&lt;/h3&gt;&lt;p&gt;函数参数是指针时，在指针参数的传递时需要注意：&lt;br&gt;(1) 函数的参数是一个指针，不能用该指针去申请动态内存。&lt;br&gt;(2) 如果非得要使用指针参数去申请内存，那么应该改用”指向指针的指针”。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void GetMemory(char **p, int num)
{ 
    *p = (char *)malloc(sizeof(char) * num);
} 
void Test(void)
{ 
    char *str = NULL;
      GetMemory(&amp;amp;str, 100);   //参数是&amp;amp;str
    strcpy(str, &amp;quot;hello&amp;quot;);
       cout&amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
       free(str);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(3) 由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char *GetMemory(int num)
{ 
    char *p = (char *)malloc(sizeof(char) * num); return p;    
} 
void Test(void)
{ 
    char *str = NULL;
     str = GetMemory3(100);
      strcpy(str, &amp;quot;hello&amp;quot;);
      cout&amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
      free(str);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;待续&quot;&gt;&lt;a href=&quot;#待续&quot; class=&quot;headerlink&quot; title=&quot;待续&quot;&gt;&lt;/a&gt;待续&lt;/h3&gt;&lt;p&gt;内存管理是c/c++的最重要的问题之一，这里只是简单的对常见的内存分配与回收、内存错误及解决策略、指针和数组等问题进行了分析和总结。这部分理论较多，需很好的理解与掌握。 要是能自己再结合实际分析一下，就能更好地理解、掌握了。&lt;br&gt;以上，只是c/c++内存管理的一角，后面还将更深入探讨。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;可以说，内存管理是c/c++程序员面临的最重要的问题之一，同时很多时候也是最麻烦的事情。所以，这里对简单层次的内存管理做下总结和说明，同时，例举了一些常见的内存错误及解决策略。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.dujiong.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>动态规划之最长公共子序列，最长公共子串，最长递增子序列，最长子序列和等</title>
    <link href="http://blog.dujiong.net/2016/03/25/Seq&Substring/"/>
    <id>http://blog.dujiong.net/2016/03/25/Seq&Substring/</id>
    <published>2016-03-25T07:05:10.000Z</published>
    <updated>2016-06-28T11:03:42.060Z</updated>
    
    <content type="html">&lt;p&gt;近来，重新研究了动态规划的一些常见问题，特别是针对数组、子序列和串。学习过程又有了些新的看法与感悟，特记录如下。&lt;/p&gt;
&lt;p&gt;总结：动态规划是算法设计中非常重要的思想，值得我们多领悟、总结。&lt;br&gt;1.在研究动态规划过程中，一定要深刻理解递归解决公共子问题，并且要能将其和分治法区分开。&lt;br&gt;2.状态转移方程，就是反应解决动态规划的思路。当理解写出状态转移方程后，离成功就不远了。&lt;br&gt;3.针对很多关于串、子串的问题，注意边界问题的处理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;最大子数组和&quot;&gt;&lt;a href=&quot;#最大子数组和&quot; class=&quot;headerlink&quot; title=&quot;最大子数组和&quot;&gt;&lt;/a&gt;最大子数组和&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;leetcode：maximum-subarray&lt;/a&gt;&lt;br&gt;说明：找出和最大的子数组。当然，子数组是连续的序列。&lt;br&gt;动态规划方案：使用两个变量，分别保存到目前为止的局部最优解和全局最优解。为什么要这样呢？因为，局部最优不一定是全局最优。  &lt;/p&gt;
&lt;p&gt;核心代码：   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(int i=1; i&amp;lt;nums.size(); i++)
   {
   local = max(nums[i], nums[i]+local);
   global = max(global, local);
   }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;最长递增子序列长度&quot;&gt;&lt;a href=&quot;#最长递增子序列长度&quot; class=&quot;headerlink&quot; title=&quot;最长递增子序列长度&quot;&gt;&lt;/a&gt;最长递增子序列长度&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-increasing-subsequence/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;leetcode:longest increasing subsequence&lt;/a&gt;&lt;br&gt;说明：子序列，不要求连续。这里，只说明获取最长子序列的长度。&lt;br&gt;动态规划方案：使用dp[i]保存到目前为止的最长递增子序列长度，maxRet保存整个序列的最长递增子序列长度。把当前数据值与其前面所有的数据进行比较，从而更新子序列的长度。   &lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vector&amp;lt;int&amp;gt; dp(n,0);
dp[0]=1; 
int maxRet=0;
for(int i=1; i&amp;lt;n; i++)
   {
   for(int j=0; j&amp;lt;i; j++)
   {
       if(nums[i]&amp;gt; nums[j])
           dp[i] = max(dp[i], dp[j]); 
       dp[i] += 1;    
       maxRet = max(maxRet, dp[i]); 
   }
   return maxRet;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;最长公共子串&quot;&gt;&lt;a href=&quot;#最长公共子串&quot; class=&quot;headerlink&quot; title=&quot;最长公共子串&quot;&gt;&lt;/a&gt;最长公共子串&lt;/h3&gt;&lt;p&gt;说明:找出两个字符串的最长公共字串。子串是连续的&lt;br&gt;动态规划方案：使用dp[i][j]表示以x[i]和y[j]结尾的最长公共子串的长度，因为子串是连续的，所以，对于x[i]与y[j]来讲，它们要么与之前的公共子串构成新的公共子串；要么不构成。故状态转移方程为：&lt;br&gt;（1） X[i]==Y[j], dp[i][j] = dp[i-1][j-1]+1;&lt;br&gt;（2） X[i]!=Y[j], dp[i][j] = 0&lt;br&gt;对于初始化，i==0或者j==0,如果x[i]=y[j],dp[i][j] = 1;否则dp[i][j]=0;     &lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const string LCS(const string&amp;amp; str1,const string&amp;amp; str2)   //s1
{
    int xlen=str1.size();
    int ylen=str2.size();
    int maxlen=0;
    int maxindex=0;
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(xlen,vector&amp;lt;int&amp;gt;(ylen));
    for(int k=0;k&amp;lt;xlen;k++)
        for(int j=0;j&amp;lt;ylen;j++)
        {
            dp[k][j]=0;
        }
    int i=0;
    for(i=0;i&amp;lt;xlen;i++)
    {
        for(int j=0;j&amp;lt;ylen;j++)
        {
            if(str1[i]==str2[j])
            {
                if(i&amp;amp;&amp;amp;j)
                {
                     dp[i][j]=dp[i-1][j-1]+1;
                }
                if(i==0||j==0)
                {
                    dp[i][j]=1;
                }
                if(dp[i][j]&amp;gt;maxlen)
                {
                    maxlen = dp[i][j];
                    maxindex=i+1-maxlen;
                }
            }
        }
    }
    string res=str1.substr(maxindex,maxlen);
    return res;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;h3 id=&quot;最长公共子序列&quot;&gt;&lt;a href=&quot;#最长公共子序列&quot; class=&quot;headerlink&quot; title=&quot;最长公共子序列&quot;&gt;&lt;/a&gt;最长公共子序列&lt;/h3&gt;&lt;p&gt;说明：相比于最长公共子串，差别在于公共子序列不要求数组中的元素连续。&lt;br&gt;和公共子串类似，不再啰嗦，直接上代码。     &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int LCSseq(const string&amp;amp; str1,const string&amp;amp; str2)
{
...
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(xlen,vector&amp;lt;int&amp;gt;(ylen));
for(int i=0;i&amp;lt;xlen;i++)
    for(int j=0;j&amp;lt;len;j++)
    {
        if(str[i]==str2[j])
        {   
            if(i==0 || j==0)
                dp[i][j]=1; 
        }
        else
        {
            dp[i][j]=dp[i-1][j-1]+1;
        }
        else
        {
            if(i==0&amp;amp;&amp;amp;j==0)
                    continue;
            else if(i!=0&amp;amp;&amp;amp;j!=0)
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            esle
                    dp[i][j]=1;
        }
    }    
    return dp[xlen-1][ylen-1];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;字符串编辑距离&quot;&gt;&lt;a href=&quot;#字符串编辑距离&quot; class=&quot;headerlink&quot; title=&quot;字符串编辑距离&quot;&gt;&lt;/a&gt;字符串编辑距离&lt;/h3&gt;&lt;p&gt;说明：给定一个源字符串和目标字符串，能够对源串进行如下操作：&lt;br&gt;(1)在给定位置上插入一个字符&lt;br&gt;(2)替换任意字符&lt;br&gt;(3)删除任意字符&lt;br&gt;所以，字符串编辑距离，是指两个字符串之间，由一个转换成另一个所需的最少操作次数。&lt;br&gt;动态规划方案：定义f[i,j]为子串str1[0…i]和str2[0…j]的最小编辑距离，则状态转移方程为：&lt;br&gt;f[i,j] = Min(f[i-1,j]+1,f[i,j-1]+1,f[i-1,j-1]+(str1[i]==str2[j]?0:1))  &lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    int minDistance(string word1, string word2) 
    {
    int n1 = word1.size(), n2 = word2.size();
    int dp[n1 + 1][n2 + 1];
    for (int i = 0; i &amp;lt;= n1; ++i) dp[i][0] = i;
    for (int i = 0; i &amp;lt;= n2; ++i) dp[0][i] = i;
    for (int i = 1; i &amp;lt;= n1; ++i) 
    {
        for (int j = 1; j &amp;lt;= n2; ++j) 
        {
            if (word1[i - 1] == word2[j - 1]) 
            {
                dp[i][j] = dp[i - 1][j - 1];
            } 
            else 
            {
                dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
            }
        }
    }
    return dp[n1][n2];
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;待续&quot;&gt;&lt;a href=&quot;#待续&quot; class=&quot;headerlink&quot; title=&quot;待续&quot;&gt;&lt;/a&gt;待续&lt;/h3&gt;&lt;p&gt;这里通过几个典型实例简单说明了动态规划类问题的一些思路和方法。但是对于想很好的掌握动态规划，还是远远不够的。所以，还得多想，多领悟。 加油吧!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近来，重新研究了动态规划的一些常见问题，特别是针对数组、子序列和串。学习过程又有了些新的看法与感悟，特记录如下。&lt;/p&gt;
&lt;p&gt;总结：动态规划是算法设计中非常重要的思想，值得我们多领悟、总结。&lt;br&gt;1.在研究动态规划过程中，一定要深刻理解递归解决公共子问题，并且要能将其和分治法区分开。&lt;br&gt;2.状态转移方程，就是反应解决动态规划的思路。当理解写出状态转移方程后，离成功就不远了。&lt;br&gt;3.针对很多关于串、子串的问题，注意边界问题的处理。&lt;br&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://blog.dujiong.net/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt设置程序开机自启动</title>
    <link href="http://blog.dujiong.net/2016/03/18/startAP/"/>
    <id>http://blog.dujiong.net/2016/03/18/startAP/</id>
    <published>2016-03-18T09:05:23.000Z</published>
    <updated>2016-07-21T08:44:05.984Z</updated>
    
    <content type="html">&lt;h3 id=&quot;OpenWrt启动脚本&quot;&gt;&lt;a href=&quot;#OpenWrt启动脚本&quot; class=&quot;headerlink&quot; title=&quot;OpenWrt启动脚本&quot;&gt;&lt;/a&gt;OpenWrt启动脚本&lt;/h3&gt;&lt;p&gt;需要在OpenWrt中-将自己的程序设置为开机自启动。虽然OpenWrt是基于Linux的嵌入式发行版，但是和其设置方法还是略有差异，在此做一份记录。参考：&lt;a href=&quot;http://wiki.openwrt.org/doc/techref/initscripts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wiki.openwrt.org/doc/techref/initscripts&lt;/a&gt;&lt;br&gt;OpenWrt的启动脚本在/etc/init.d/目录下，而系统开机时自动运行/etc/rc.d/目录下的脚本，所以在rc.d目录下，有init.d脚本的连接文件。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编写自己的启动脚本&quot;&gt;&lt;a href=&quot;#编写自己的启动脚本&quot; class=&quot;headerlink&quot; title=&quot;编写自己的启动脚本&quot;&gt;&lt;/a&gt;编写自己的启动脚本&lt;/h3&gt;&lt;p&gt;按照以下结构编写自己的shell脚本(这里以我的startAP为例说明)。特别注意一下，OpenWrt中的shell解析器与常用的Linux桌面、服务器（bash）不一样，记得当时写的时候就用的是#/bin/bash，后面找了好久才发现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh /etc/rc.common
#/init.d/startAP
START=50
start()
{
    ...
}
stop()
{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在start()中写入需要开机运行的程序命令，在stop()中写入终止程序的命令。START=50是指优先级，数字越大，优先级越低。一般优先级高的脚本会先运行。&lt;br&gt;编写好自己的程序启动脚本后，熟悉Linux的都知道，要让程序执行，需要给脚本赋予可执行权限。所以，运行命令chmod+x xxx。&lt;/p&gt;
&lt;h3 id=&quot;为启动脚本做一个软链接&quot;&gt;&lt;a href=&quot;#为启动脚本做一个软链接&quot; class=&quot;headerlink&quot; title=&quot;为启动脚本做一个软链接&quot;&gt;&lt;/a&gt;为启动脚本做一个软链接&lt;/h3&gt;&lt;p&gt;如上所述，系统启动时会按顺序自动运行/etc/rc.d/目录下的脚本链接，对应执行/etc/init.d/目录下的启动脚本。所以，需要在/etc/rc.d/下为启动脚本创建一个链接。注意，链接文件要命名要规范，在脚本名前加S+启动顺序数字。顺便提一句，这里的启动顺序数字和前面所说到的优先级可是两码事。&lt;br&gt;所以，执行命令ln -s /etc/init.d/startAP /etc/rc.d/S95startAP创建链接。&lt;br&gt;最后，重启，就可以开机启动程序了。不妨使用ps查看一下吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;OpenWrt启动脚本&quot;&gt;&lt;a href=&quot;#OpenWrt启动脚本&quot; class=&quot;headerlink&quot; title=&quot;OpenWrt启动脚本&quot;&gt;&lt;/a&gt;OpenWrt启动脚本&lt;/h3&gt;&lt;p&gt;需要在OpenWrt中-将自己的程序设置为开机自启动。虽然OpenWrt是基于Linux的嵌入式发行版，但是和其设置方法还是略有差异，在此做一份记录。参考：&lt;a href=&quot;http://wiki.openwrt.org/doc/techref/initscripts&quot;&gt;http://wiki.openwrt.org/doc/techref/initscripts&lt;/a&gt;&lt;br&gt;OpenWrt的启动脚本在/etc/init.d/目录下，而系统开机时自动运行/etc/rc.d/目录下的脚本，所以在rc.d目录下，有init.d脚本的连接文件。&lt;br&gt;
    
    </summary>
    
    
      <category term="openwrt/wifi" scheme="http://blog.dujiong.net/tags/openwrt-wifi/"/>
    
  </entry>
  
  <entry>
    <title>配置OpenWrt路由器为Dumb AP</title>
    <link href="http://blog.dujiong.net/2016/03/15/dumbap/"/>
    <id>http://blog.dujiong.net/2016/03/15/dumbap/</id>
    <published>2016-03-15T13:21:29.466Z</published>
    <updated>2016-07-21T08:44:05.172Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Dumb-AP&quot;&gt;&lt;a href=&quot;#Dumb-AP&quot; class=&quot;headerlink&quot; title=&quot;Dumb AP&quot;&gt;&lt;/a&gt;Dumb AP&lt;/h2&gt;&lt;p&gt;Dumb AP，简单说，就是将路由器作为一个纯接入点，没有路由转发，没有DHCP。这时的路由器相当于一台二层交换机，没有三层功能。所以，实验环境中，将Dumb AP连接在上级路由器下，子网段为192.168.1.1/24。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置Dumb-AP&quot;&gt;&lt;a href=&quot;#配置Dumb-AP&quot; class=&quot;headerlink&quot; title=&quot;配置Dumb AP&quot;&gt;&lt;/a&gt;配置Dumb AP&lt;/h2&gt;&lt;h3 id=&quot;修改网络配置文件-etc-config-network&quot;&gt;&lt;a href=&quot;#修改网络配置文件-etc-config-network&quot; class=&quot;headerlink&quot; title=&quot;修改网络配置文件(/etc/config/network)&quot;&gt;&lt;/a&gt;修改网络配置文件(/etc/config/network)&lt;/h3&gt;&lt;p&gt;修改OpenWrt的网络配置文件，将wan口和lan口桥接起来:&lt;br&gt;&lt;code&gt;config interface lan&lt;/code&gt;&lt;br&gt;    &lt;code&gt;option type &amp;#39;bridge&amp;#39;&lt;/code&gt;&lt;br&gt;    &lt;code&gt;option ifname &amp;#39;eth0.1 eth0.2&amp;#39;&lt;/code&gt;  ##将二者桥接&lt;br&gt;    &lt;code&gt;option proto static&lt;/code&gt;&lt;br&gt;    &lt;code&gt;option ipaddr &amp;#39;192.168.1.196&amp;#39;&lt;/code&gt;  ##采用静态ip&lt;br&gt;    &lt;code&gt;option netmask 255.255.255.0&lt;/code&gt;&lt;br&gt;然后注释掉路由器关于wan口的设置，包括ipv4和ipv6。&lt;br&gt;需要说明的是，上述的配置文件中桥接的而是eth0.1和eth0.2，但事实上路由器的接口不尽相同，比如有的wan口事实上是eth1。所以，需要因地制宜。&lt;/p&gt;
&lt;h3 id=&quot;关掉DHCP&quot;&gt;&lt;a href=&quot;#关掉DHCP&quot; class=&quot;headerlink&quot; title=&quot;关掉DHCP&quot;&gt;&lt;/a&gt;关掉DHCP&lt;/h3&gt;&lt;p&gt;因为这里将路由器作为Dumb AP使用，作为一个纯无线接入点和交换机使用，不再需要其DHCP功能，所以关掉DHCP。&lt;br&gt;可以通过uci或者是修改配置文件(/etc/config/dhcp)设置DHCP。这里采用的是后者，即注释掉文件中lan口dhcp配置相关的设置。&lt;br&gt;&lt;code&gt;#config dhcp &amp;#39;lan&amp;#39;&lt;/code&gt;&lt;br&gt;    &lt;code&gt;#option interface &amp;#39;lan&amp;#39;&lt;/code&gt;&lt;br&gt;    &lt;code&gt;#option dhcpv6 &amp;#39;server&amp;#39;&lt;/code&gt;&lt;br&gt;    &lt;code&gt;#option ra &amp;#39;server&amp;#39;&lt;/code&gt;&lt;br&gt;    &lt;code&gt;#option ignore &amp;#39;1&amp;#39;&lt;/code&gt;&lt;br&gt;    &lt;code&gt;#option ra_management &amp;#39;1&amp;#39;&lt;/code&gt; &lt;/p&gt;
&lt;h3 id=&quot;关掉防火墙&quot;&gt;&lt;a href=&quot;#关掉防火墙&quot; class=&quot;headerlink&quot; title=&quot;关掉防火墙&quot;&gt;&lt;/a&gt;关掉防火墙&lt;/h3&gt;&lt;p&gt;某些情况下，需要关闭防火墙，同样的，修改配置文件/etc/config/firewall，将相应的REJECT改成ACCEPT即可，具体不再详述。&lt;br&gt;最后，载入新的配置即可。&lt;/p&gt;
&lt;h2 id=&quot;附：完整的-etc-config-network文件&quot;&gt;&lt;a href=&quot;#附：完整的-etc-config-network文件&quot; class=&quot;headerlink&quot; title=&quot;附：完整的/etc/config/network文件&quot;&gt;&lt;/a&gt;附：完整的/etc/config/network文件&lt;/h2&gt;&lt;p&gt;&lt;code&gt;config interface &amp;#39;loopback&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ifname &amp;#39;lo&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option proto &amp;#39;static&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ipaddr &amp;#39;127.0.0.1&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option netmask &amp;#39;255.0.0.0&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config globals &amp;#39;globals&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ula_prefix &amp;#39;fd9f:91f8:3d14::/48&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config interface &amp;#39;lan&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ifname &amp;#39;eth0.1 eth0.2&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option force_link &amp;#39;1&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option macaddr &amp;#39;b0:68:b6:ff:d6:b8&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option type &amp;#39;bridge&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option proto &amp;#39;static&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ipaddr &amp;#39;192.168.1.196&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option netmask &amp;#39;255.255.255.0&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ip6assign &amp;#39;60&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#config interface &amp;#39;wan&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;#option ifname &amp;#39;eth0.2&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;#option force_link &amp;#39;1&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;#option macaddr &amp;#39;b0:68:b6:ff:d6:b9&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;#option proto &amp;#39;dhcp&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#config interface &amp;#39;wan6&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;#option ifname &amp;#39;eth0.2&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;#option proto &amp;#39;dhcpv6&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;以下均保持原状&lt;/code&gt;&lt;br&gt;&lt;code&gt;config switch&lt;/code&gt;&lt;br&gt;&lt;code&gt;option name &amp;#39;switch0&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option reset &amp;#39;1&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option enable_vlan &amp;#39;1&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;config switch_vlan&lt;/code&gt;&lt;br&gt;&lt;code&gt;option device &amp;#39;switch0&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option vlan &amp;#39;1&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ports &amp;#39;0 1 2 3 6t&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;config switch_vlan&lt;/code&gt;&lt;br&gt;&lt;code&gt;option device &amp;#39;switch0&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option vlan &amp;#39;2&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;option ports &amp;#39;4 6t&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Dumb-AP&quot;&gt;&lt;a href=&quot;#Dumb-AP&quot; class=&quot;headerlink&quot; title=&quot;Dumb AP&quot;&gt;&lt;/a&gt;Dumb AP&lt;/h2&gt;&lt;p&gt;Dumb AP，简单说，就是将路由器作为一个纯接入点，没有路由转发，没有DHCP。这时的路由器相当于一台二层交换机，没有三层功能。所以，实验环境中，将Dumb AP连接在上级路由器下，子网段为192.168.1.1/24。&lt;br&gt;
    
    </summary>
    
    
      <category term="openwrt/wifi" scheme="http://blog.dujiong.net/tags/openwrt-wifi/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to My Blog</title>
    <link href="http://blog.dujiong.net/2016/03/11/welcome/"/>
    <id>http://blog.dujiong.net/2016/03/11/welcome/</id>
    <published>2016-03-11T03:05:15.275Z</published>
    <updated>2016-03-18T08:24:03.699Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://blog.dujiong.net/&quot;&gt;My Blog&lt;/a&gt;! Happy Everyday！&lt;/p&gt;
&lt;p&gt;This is where i am writing and leaning. Let’s go!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://blog.dujiong.net/&quot;&gt;My Blog&lt;/a&gt;! Happy Everyday！&lt;/p&gt;
&lt;p&gt;This is where i am writing and leaning. Let’s go!&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
